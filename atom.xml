<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alexander Manekovskyi]]></title>
  <link href="http://amanek.com/atom.xml" rel="self"/>
  <link href="http://amanek.com/"/>
  <updated>2021-06-28T00:28:57-07:00</updated>
  <id>http://amanek.com/</id>
  <author>
    <name><![CDATA[Alexander Manekovskiy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Better Command Line Experience on Windows With ConEmu, Clink and Oh My Posh]]></title>
    <link href="http://amanek.com/better-command-line-experience-on-windows-with-conemu-clink-and-oh-my-posh/"/>
    <updated>2021-06-20T16:11:00-07:00</updated>
    <id>http://amanek.com/better-command-line-experience-on-windows-with-conemu-clink-and-oh-my-posh</id>
    <content type="html"><![CDATA[<p>Recently, I stumbled upon Brad Wilson‚Äôs post - <a href="https://bradwilson.io/blog/prompt/powershell">Anatomy of a Prompt (PowerShell)</a> and decided that I also want to have a fancy-looking command prompt for a cmd.exe. Fanciness includes but not limited to:</p>

<ul>
<li>A custom prompt that display computer name and current user, git status, and features pretty looking powerlines</li>
<li>Persistent commands history</li>
<li>Command completion, aliases/macros support + their expansion on demand</li>
</ul>


<p>This is what my console looks like after all modifications:</p>

<p><img class="center" src="http://amanek.com/images/posts/awesome-looking-command-line-prompt.gif" title="Awesome looking command line prompt" alt="Awesome looking command line prompt"></p>

<p>At first, I was planning to give an overview of my current setup, but then the description grew, and now I have a detailed guide about how to improve the look and feel of the CMD.</p>

<p>Table of contents:
 - <a href="">Set Command Aliases/Macros For CMD.exe In ConEmu</a>
 - <a href="">Integrate Clink</a>
   - <a href="">Configure Clink Completions</a>
 - <a href="">Change The Prompt With Oh My Posh</a>
 - <a href="">Conclusions</a></p>

<h2>Set Command Aliases/Macros For CMD.exe In ConEmu</h2>

<p>For many years I have been a loyal and happy user of ConEmu. This tool is great - it is reliable, fast, and highly configurable. ConEmu has a portable version, so setup replication is not a problem - I keep it in the ever-growing list of utilities on my cloud storage.</p>

<p>One of the issues with cmd is the absence of persistent user-scoped command aliases or macros. Yes, there is a <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/doskey">DOSKEY</a> command, but you are required to integrate its invocation into your cmd startup. To get more control over my macros setup, I wrote a utility (<a href="https://github.com/manekovskiy/aliaser">GitHub - manekovskiy/aliaser</a>) that pulls a list of command aliases from the file and sets them up for the current process.</p>

<blockquote><p>ConEmu provides native support for command aliases; refer to <a href="https://conemu.github.io/en/SettingsEnvironment.html">ConEmu | Settings ‚Ä∫ Environment</a> page for more details.</p></blockquote>

<p>My setup is following:</p>

<ul>
<li>Put compiled aliaser.exe and a file containing aliases (my list - <a href="https://gist.github.com/manekovskiy/57e98863e0b04e7ce3b9d3346486b3aa">GitHub - aliases.txt</a>) to the <code>%ConEmuBaseDir%\Scripts</code> folder.</li>
<li>Add a batch file containing the invocation of the aliaser utility to the <code>%ConEmuBaseDir%\Scripts</code> folder.</li>
</ul>


<figure class='code'><figcaption><span>setup-aliases.cmd </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">call</span> <span class="s2">&quot;%~dp0aliaser.exe&quot;</span> -f <span class="s2">&quot;%~dp0aliases.txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Update ConEmu CMD tasks to include setup-aliases.cmd invocation. Example: <code>cmd.exe /k setup-aliases.cmd</code></li>
</ul>


<blockquote><p>There is no need to provide a path to the batch file because the default ConeEmu setup adds a <code>%ConEmuBaseDir%\Scripts</code> folder to the PATH environment variable.</p></blockquote>

<h2>Integrate Clink</h2>

<p>Another great addition to the cmd is a Clink - it augments the command line with many great features like persistent history, environment variable names completion, scriptable keybindings, and command completions.</p>

<p>Again, ConEmu provides integration with Clink (see <a href="https://conemu.github.io/en/TabCompletion.html#ConEmu_and_clink">ConEmu | cmd.exe and clink</a>). It is important to note that ConEmu works well only with the current active fork of the clink project - <a href="https://github.com/chrisant996/clink">chrisant996/clink</a>.</p>

<p>In short, to install and enable Clink in ConEmu, you should extract the contents of the clink release archive into the <code>%ConEmuBaseDir%\clink</code> and check the ‚ÄúUse Clink in prompt‚Äù under the Features settings section.</p>

<p><img class="center" src="http://amanek.com/images/posts/conemu-settings-features-use-clink-in-prompt.png" title="Enable &quot;Use Clink in prompt&quot; configuration setting" alt="Enable &quot;Use Clink in prompt&quot; configuration setting"></p>

<p>An indicator of successful integration is the text mentioning the Clink version and its authors, similar to the following:</p>

<pre><code>Clink v1.2.9.329839
Copyright (c) 2012-2018 Martin Ridgers
Portions Copyright (c) 2020-2021 Christopher Antos
https://github.com/chrisant996/clink
</code></pre>

<h3>Configure Clink Completions</h3>

<p>One of the most powerful features of the Clink is that it is scriptable through Lua. It is possible to add custom command completion logic, add or change the keybindings or even modify the look of the prompt.</p>

<p>On startup, Clink looks for a clink.lua script, which is an entry point for all extension registrations. There are a couple of places where Clink tries to locate the file, one of them is the <code>%CLINK_INPUTRC%</code> folder. There should be an empty <code>clink.lua</code> file in the <code>%ConEmuBaseDir%\clink</code> folder (comes as a part of the Clink release). To make it visible to ConEmu and Clink, add a <code>CLINK_INPUTRC</code> variable to the ConEmu Environment configuration: <code>set CLINK_INPUTRC=%ConEmuBaseDir%\clink</code>.</p>

<p><img class="center" src="http://amanek.com/images/posts/conemu-settings-startup-environment-add-CLINK_INPUTRC-variable.png" title="Add &quot;CLINK_INPUTRC&quot; variable to the ConEmu Startup settings" alt="Add &quot;CLINK_INPUTRC&quot; variable to the ConEmu Startup settings"></p>

<p>Not so long ago, I found that Cmder (a quite opinionated build of ConEmu) distribution already contains Clink and completion files for all super popular command-line utilities. A little bit of search showed that completions in Cmder come from the <a href="https://github.com/vladimir-kotikov/clink-completions">GitHub - vladimir-kotikov/clink-completions</a> repository.</p>

<p>Download the latest available clink-completions release and unpack it in the <code>%ConEmuBaseDir%\clink\profile</code>. I decided to drop the version number from the clink-completions folder name, so I would not have to update the registration script every time I update the completions. I also made the registration of the Clink extensions maximally universal. I went with a convention-based approach to files and folders organization:</p>

<ul>
<li>Each Clink extension should be put into a separate folder under <code>%ConEmuBaseDir%\clink\profile</code>. This ensures proper grouping and logical separation of scripts.</li>
<li>Each Clink extension group should define a registration script under <code>%ConEmuBaseDir%\clink\profile</code>.</li>
<li>Code in <code>clink.lua</code> should locate all registration scripts under <code>%ConEmuBaseDir%\clink\profile</code> and unconditionally execute them.</li>
</ul>


<p>Example folder structure:</p>

<pre><code>üìÇ %ConEmuBaseDir%\clink
  üìÇ profile
    üìÅ clink-completions
    üìÅ extension-x
    üìÅ oh-my-posh
    üìÑ clink-competions.lua
    üìÑ oh-my-posh.lua
    üìÑ extension-x.lua
  üìÑ clink.lua
</code></pre>

<p>The registration script is simple:</p>

<figure class='code'><figcaption><span>clink.lua </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- clink.lua</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Globals</span>
</span><span class='line'><span class="n">__clink_dir</span> <span class="o">=</span> <span class="n">clink</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">ConEmuBaseDir&#39;</span><span class="p">)</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">/clink/&#39;</span>
</span><span class='line'><span class="n">__clink_profile_dir</span> <span class="o">=</span> <span class="n">clink</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">ConEmuBaseDir&#39;</span><span class="p">)</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">/clink/profile/&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Load profile scripts</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span><span class="p">,</span><span class="n">lua_module</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">clink</span><span class="p">.</span><span class="n">find_files</span><span class="p">(</span><span class="n">__clink_profile_dir</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">*.lua&#39;</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">__clink_profile_dir</span><span class="o">..</span><span class="n">lua_module</span>
</span><span class='line'>    <span class="c1">-- use dofile instead of require because require caches loaded modules</span>
</span><span class='line'>    <span class="c1">-- so config reloading using Alt-Q won&#39;t reload updated modules.</span>
</span><span class='line'>    <span class="nb">dofile</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The clink-completions registration script is also a barebone minimum. I extracted it from the Cmder&#8217;s <a href="https://github.com/cmderdev/cmder/blob/946f929eafe0f9017d1f3cb9f8d144c7f61064e0/vendor/clink.lua#L505">clink.lua</a>:</p>

<figure class='code'><figcaption><span>clink-completions.lua </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- clink-completions.lua</span>
</span><span class='line'><span class="c1">-- Completions scripts taken from from https://github.com/vladimir-kotikov/clink-completions</span>
</span><span class='line'><span class="c1">-- Last updated on 6/5/2021. Version 0.3.7.</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">completions_dir</span> <span class="o">=</span> <span class="n">__clink_profile_dir</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">clink-completions/&#39;</span>
</span><span class='line'><span class="c1">-- Execute &#39;.init.lua&#39; first to ensure package.path is set properly</span>
</span><span class='line'><span class="nb">dofile</span><span class="p">(</span><span class="n">completions_dir</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">.init.lua&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span><span class="p">,</span><span class="n">lua_module</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">clink</span><span class="p">.</span><span class="n">find_files</span><span class="p">(</span><span class="n">completions_dir</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">*.lua&#39;</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1">-- Skip files that starts with _. This could be useful if some files should be ignored</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="nb">string.match</span><span class="p">(</span><span class="n">lua_module</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">^_.*&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>        <span class="kd">local</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">completions_dir</span><span class="o">..</span><span class="n">lua_module</span>
</span><span class='line'>        <span class="c1">-- use dofile instead of require because require caches loaded modules</span>
</span><span class='line'>        <span class="c1">-- so config reloading using Alt-Q won&#39;t reload updated modules.</span>
</span><span class='line'>        <span class="nb">dofile</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Change The Prompt With Oh My Posh</h2>

<p>If you never heard of it before, <a href="https://ohmyposh.dev/">Oh My Posh</a> is a command prompt theme engine. It was first created for PowerShell, but now, in V3, Oh My Posh became cross-platform with a universal configuration format, which means that you can use it in any shell or OS.</p>

<blockquote><p>ConEmu distribution contains an initialization script file - CmdInit.cmd, which can display the current git branch and/or current user name in the command prompt (see <a href="https://conemu.github.io/en/CmdPrompt.html">ConEmu | Configuring Cmd Prompt</a> for more details).</p></blockquote>

<p>When it comes to CMD, Oh My Posh could be integrated through Clink. Clink has a concept of <a href="https://chrisant996.github.io/clink/clink.html#customising-the-prompt">prompt filters</a> - code that executes when the prompt is being rendered.</p>

<p>Installation and integration with Clink steps are very straightforward:</p>

<ol>
<li>Download the latest release</li>
<li>Move the executable to the <code>%ConEmuBaseDir%\clink\profile\oh-my-posh\bin</code> folder</li>
<li>Add oh-my-posh.lua script to the <code>%ConEmuBaseDir%\clink\profile</code> folder</li>
<li>Create a theme file (I named mine amanek.omp.json)</li>
</ol>


<p>Following is the expected folder structure:</p>

<pre><code>üìÇ %ConEmuBaseDir%\clink
  üìÇ profile
    üìÇ oh-my-posh
      üìÇ bin
        üì¶ oh-my-posh.exe &lt;-- note, that I renamed the executable file to oh-my-posh.exe.
      üé® amanek.omp.json
    üìÑ oh-my-posh.lua
  üìÑ clink.lua
</code></pre>

<p>The registration script was inspired by the Clink project readme file:</p>

<figure class='code'><figcaption><span>oh-my-posh.lua </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- oh-my-posh.lua</span>
</span><span class='line'><span class="c1">-- Taken from https://github.com/chrisant996/clink/blob/master/docs/clink.md#oh-my-posh</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">ohmyposh_dir</span> <span class="o">=</span> <span class="n">__clink_profile_dir</span><span class="o">..</span><span class="s2">&quot;</span><span class="s">oh-my-posh/&quot;</span>
</span><span class='line'><span class="kd">local</span> <span class="n">ohmyposh_exe</span> <span class="o">=</span> <span class="n">__clink_profile_dir</span><span class="o">..</span><span class="s2">&quot;</span><span class="s">oh-my-posh/bin/oh-my-posh.exe&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">ohmyposh_prompt</span> <span class="o">=</span> <span class="n">clink</span><span class="p">.</span><span class="n">promptfilter</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">function</span> <span class="nf">ohmyposh_prompt</span><span class="p">:</span><span class="n">filter</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span><span class='line'>    <span class="n">prompt</span> <span class="o">=</span> <span class="nb">io.popen</span><span class="p">(</span><span class="n">ohmyposh_exe</span><span class="o">..</span><span class="s2">&quot;</span><span class="s"> --config &quot;</span><span class="o">..</span><span class="n">ohmyposh_dir</span><span class="o">..</span><span class="s2">&quot;</span><span class="s">amanek.omp.json --shell universal&quot;</span><span class="p">):</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">*a&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">prompt</span><span class="p">,</span> <span class="kc">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Oh My Posh comes with a wide variety of prebuilt themes. The customization process is well described in the <a href="https://ohmyposh.dev/docs/windows#override-the-theme-settings">Override the theme settings</a> documentation section.</p>

<p>Here is the link to my theme file - <a href="https://gist.github.com/manekovskiy/70698cc9309a833582bb750221c49e04">GitHub - amanek.omp.json</a>. It includes the following sections:</p>

<ul>
<li>Indicator of elevated prompt. Displays a lightning symbol if my console instance is running as Administrator.</li>
<li>Logged-in user name and computer name. I frequently connect to different machines over RDP, so it is good to know where am I right now üòä</li>
<li>Location path</li>
<li>Git status</li>
</ul>


<p>One of the issues I encountered during the command prompt customization process is that ConEmu remaps console colors and replaces them with its own color scheme:</p>

<p><img class="center" src="http://amanek.com/images/posts/conemu-features-colors.png" title="ConEmu Colors configuration section" alt="ConEmu Colors configuration section"></p>

<p>As you can see, ConEmu uses a color scheme based on the 16 ANSI colors. Fortunately, in Oh My Posh, it is also possible to specify color using one of the well-known 16 color names (see <a href="https://ohmyposh.dev/docs/configure/#standard-colors">standard colors documentation section</a>). Here is the ‚ÄúConEmu color number to Oh My Posh color name‚Äù conversion table:</p>

<table>
<thead>
<tr>
<th><strong>Number</strong>¬†¬†</th>
<th> <strong>Color</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>0           </td>
<td> black</td>
</tr>
<tr>
<td>1/4         </td>
<td> blue</td>
</tr>
<tr>
<td>2           </td>
<td> green</td>
</tr>
<tr>
<td>3/6         </td>
<td> cyan</td>
</tr>
<tr>
<td>4/1         </td>
<td> red</td>
</tr>
<tr>
<td>5           </td>
<td> magenta</td>
</tr>
<tr>
<td>6/3         </td>
<td> yellow</td>
</tr>
<tr>
<td>7           </td>
<td> white</td>
</tr>
<tr>
<td>8           </td>
<td> darkGray</td>
</tr>
<tr>
<td>9           </td>
<td> lightBlue</td>
</tr>
<tr>
<td>10          </td>
<td> lightGreen</td>
</tr>
<tr>
<td>11          </td>
<td> lightCyan</td>
</tr>
<tr>
<td>12          </td>
<td> lightRed</td>
</tr>
<tr>
<td>13          </td>
<td> lightMagenta</td>
</tr>
<tr>
<td>14          </td>
<td> lightYellow</td>
</tr>
<tr>
<td>15          </td>
<td> lightWhite</td>
</tr>
</tbody>
</table>


<p>Another thing that did not work for me right away was fonts. To render powerlines and icons, Oh My Posh requires the terminal to use a font that contains glyphs from the <a href="https://github.com/ryanoasis/nerd-fonts">Nerd Fonts</a>. Nerd Fonts readme contain links to the patched and supported fonts with permissive licensing terms.</p>

<p>The font that I prefer to use was not on the list, so I had to patch it manually. The process is following:</p>

<ol>
<li>Clone Nerd Fonts repository</li>
<li>Install Font Forge and Python</li>
<li>Copy font file to a separate folder</li>
<li>In the terminal, navigate to the Nerd Fonts repo root and run the following command</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">&lt;</span><span class="n">PATH_TO_FONT_FORGE</span>&gt;\fontforge.exe -script font-patcher --windows --complete <span class="p">&lt;</span><span class="n">PATH_TO_FONT_FILE</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>More detailed instructions here - <a href="https://github.com/ryanoasis/nerd-fonts#option-8-patch-your-own-font">Nerd Fonts | Patch Your Own Font</a>.</p>

<blockquote><p>The Nerd Fonts repository is heavy, and I recommend doing a shallow clone with &#8211;depth 1 option.</p></blockquote>

<h2>Conclusions</h2>

<p>The amount of work people put into the open-source projects I mentioned is astounding. I was also pleasantly surprised with the quality of tools and customization options available for CMD. Never before my terminal window was so aesthetically pleasing and functionally rich. Now I feel more inspired to continue experimenting with my setup and hope that this guide helped to improve your console experience.</p>

<p>Good luck and happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Your Team Should Do a Code Review on a Regular Basis]]></title>
    <link href="http://amanek.com/why-your-team-should-do-a-code-review-on-a-regular-basis/"/>
    <updated>2015-10-21T19:38:00-07:00</updated>
    <id>http://amanek.com/why-your-team-should-do-a-code-review-on-a-regular-basis</id>
    <content type="html"><![CDATA[<p>While working with any system we have to take into account so many aspects that even armed with the best tooling and extensive test suites we cannot guarantee 100% (but surely we can plan and minimize the risks) that the development/maintenance cost of our software will not exceed the amount of profit it generates.</p>

<p>And to minimize the risks and costs we have to follow the best practices, methodologies and techniques. My personal approach to aforementioned good practices is very pragmatic - if something proved that it could be used to simplify the life of the team we&#8217;ll use it. And one of that things that are often underestimated or neglected is a code (or peer) review.</p>

<blockquote><p>In software development, peer review is a type of software review in which a work product (document, code, or other) is examined by its author and one or more colleagues, in order to evaluate its technical content and quality.</p>

<p><strong>From Wikipedia, the free encyclopedia.</strong></p></blockquote>

<h2>What Are The Benefits Of Doing A Code Review?</h2>

<p>The main intent of the code review is to identify source code defects and quality issues. Another big advantage is a knowledge transfer. This is maybe the least expected outcome of the code review process. I personally observed lots of cases when reviewers were giving links and citing some external resources in their comments. That additional resources were helping author to get deeper into details, see the issue from different angles and as a result produce better code.</p>

<p>For those who like numbers I recommend to read a study by Bacchelli A. and Bird C. <a href="http://sback.it/publications/icse2013.pdf">Expectations, outcomes, and challenges of modern code review</a> that characterizes the motivations of developers and managers for code review and compares it with actual results.</p>

<p>Also Steve McConnell gives enough facts of code review effectiveness in <a href="http://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=manekblog-20&amp;linkId=63IP6PEWIO325YEU">Code Complete</a>:</p>

<blockquote style="font-style: normal">
    <p style="margin-left: -1em; margin-bottom: 0.5em;">Technical reviews have been studied much longer than pair programming, and their results, as described in case studies and elsewhere, have been impressive:</p>
    <ul>
        <li>IBM found that each hour of inspection prevented about 100 hours of related work (testing and defect correction) (Holland 1999).</li>
        <li>Raytheon reduced its cost of defect correction (rework) from about 40 percent of total project cost to about 20 percent through an initiative that focused on inspections (Haley 1996).</li>
        <li>Hewlett-Packard reported that its inspection program saved an estimated $21.5 million per year (Grady and Van Slack 1994).</li>
        <li>Imperial Chemical Industries found that the cost of maintaining a portfolio of about 400 programs was only about 10 percent as high as the cost of maintaining a similar set of programs that had not been inspected (Gilb and Graham 1993).</li>
        <li>A study of large programs found that each hour spent on inspections avoided an average of 33 hours of maintenance work and that inspections were up to 20 times more efficient than testing (Russell 1991).</li>
        <li>In a software-maintenance organization, 55 percent of one-line maintenance changes were in error before code reviews were introduced. After reviews were introduced, only 2 percent of the changes were in error (Freedman and Weinberg 1990). When all changes were considered, 95 percent were correct the first time after reviews were introduced. Before reviews were introduced, under 20 percent were correct the first time.</li>
        <li>A group of 11 programs were developed by the same group of people, and all were released to production. The first five were developed without reviews and averaged 4.5 errors per 100 lines of code. The other six were inspected and averaged only 0.82 errors per 100 lines of code. Reviews cut the errors by over 80 percent (Freedman and Weinberg 1990).</li>
        <li>Capers Jones reports that of all the software projects he has studied that have achieved 99 percent defect-removal rates or better, all have used formal inspections. Also, none of the projects that achieved less than 75 percent defectremoval efficiency used formal inspections (Jones 2000).</li>
    </ul>
</blockquote>


<h2>How It Is Working?</h2>

<p>The typical code review process is following:</p>

<p><img class="center" src="http://amanek.com/images/posts/code-review-process.png" title="'Diagram showing the typical code review flow'" ></p>

<ol>
<li>Author of change generates a patch and sends it to the code review system</li>
<li>Author invites his teammates to review the code</li>
<li>Code review participants are adding comments and suggestions on code improvement</li>
<li>Author either follows the suggestions and updates the code or rejects them</li>
<li>The code review is updated by author and a new review iteration is started</li>
<li>When all debates around the change are finished the code review is approved and the change is merged into the repository.</li>
</ol>


<h2>Where To Start?</h2>

<p>Code review is often supported by tools preferably integrated into the development environment. If you are working alone there is a site where you can ask for a peer programmer code review - <a href="http://codereview.stackexchange.com/">Code Review</a>. As like on a Stack Overflow this site has an army of active members that would happily help you no matter what language or technology you are using.</p>

<p>There are also a plenty of tools available on a market starting from aforementioned SO site to <a href="https://www.visualstudio.com/en-us/get-started/code/get-code-reviewed-vs" title="Get your code reviewed with Visual Studio">TFS support</a> and integrated code review tooling inside <a href="https://github.com/features#code-review" title="Collaborative code review on GitHub">GitHub</a>, <a href="https://about.gitlab.com/features/" title="GitLab features">GitLab</a>, <a href="https://bitbucket.org/product/features" title="Bitbucket features">Bitbucket</a> and other OSS collaboration platforms.</p>

<h2>Conclusions</h2>

<p>If you are looking for how you can improve the state of the codebase and/or development process in general start practicing code review on daily basis.</p>

<p>Surely if the team never practiced code review before it would be harder to start but as Laozi said ‚ÄúThe journey of a thousand miles begins with one step‚Äù. And I wish you to succeed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate TypeScript Interfaces From .NET Assemblies Using T4 Templates]]></title>
    <link href="http://amanek.com/generate-typescript-interfaces-from-net-assemblies-using-t4-templates/"/>
    <updated>2015-10-08T11:05:00-07:00</updated>
    <id>http://amanek.com/generate-typescript-interfaces-from-net-assemblies-using-t4-templates</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>When it comes to writing the HTML/JavaScript client for <em>your</em> (&#8220;your&#8221; here means you own the code or have direct access to the assemblies) web service there is one thing that bothers everyone -  translating classes from .NET to JavaScript. The problem is that whenever your service contract changes you need to reflect this change in your client application. Yes, most of the time this is not the case when the service is already in production but when the client and the service are both being written at the same time I think you would agree that continuous changes in service contract are a common thing.</p>

<p>Another big issue - even if current service contract (read API version) is &#8220;frozen&#8221; and is not going to change in future you still have to manually translate all your .NET classes to the JavaScript. It is OK if you have a handful of classes, but can you imagine (or even recall) the pain of translating couple of dozens of C# classes to the JavaScript?</p>

<p>That&#8217;s it, that is why I&#8217;ve decided to share my approach to this issue of translating the .NET classes to JavaScript.</p>

<h2>The Problem</h2>

<p>Lets imagine the situation where we have two teams that are working on two projects - the server side and the client side. The server side is represented by ASP.NET WebAPI service and the client side is an HTML/JavaScript application. As the server project progresses client team notices that it continuously have to make little adjustments &#8220;here and there&#8221; to keep up to date with the WebAPI changes in its DTO classes. So the problem is to automate this tedious for both teams process.</p>

<blockquote><p>As of writing this post I&#8217;ve found that there is a question on StackOverflow showing an interest to this topic - <a href="http://stackoverflow.com/questions/12957820/how-to-reuse-existing-c-sharp-class-definitions-in-typescript-projects">How to reuse existing C# class definitions in TypeScript projects</a>.</p></blockquote>

<h2>The Solution</h2>

<p>As always there are two ways of solving the problem - use existing solution or write a new one.</p>

<p>There are at least two tools are available - <a href="http://type.litesolutions.net/">TypeLite</a> and <a href="https://github.com/cskeppstedt/t4ts">T4TS</a>. Everything is good with these tools but when it came to customization it turned out that you need to decorate the classes with some fancy attributes or code transformation functions. This means that you should mix in the requirements like module/property naming convention to the classes that are not even aware of existence of some client project that indirectly depends on them.</p>

<p>You can call me a purist but hey, why would I need to keep the metadata required for one project in another? And why should I complicate things and instruct the team working with a server side of how to decorate the classes with attributes that are needed by other team? Simple things should be simple. I just want my C# classes/structs/enums to be transformed to the TypeScript interfaces/classes/enums.</p>

<p><span class="pullquote-right" data-pullquote="Most of the time you will not find the &quot;ready for use&quot; solution that will 100% satisfy you. Best case is that you'll find something that is simple and easy to change."></span>
From my experience when it comes to codegeneration most of the time you will not find the &#8220;ready for use&#8221; solution that will 100% satisfy you. Best case is that you&#8217;ll find something that is simple and easy to change.
</p>


<p>So I&#8217;ve chosen the second path - hack my own solution. For DTOs I&#8217;ve decided to write a code generator based on <a href="https://msdn.microsoft.com/en-us/library/ee844259%28v=vs.120%29.aspx">T4 Text Templates</a> and reflection. And since I have a TypeScript based project my code generation templates are producing <a href="http://www.typescriptlang.org/">TypeScript</a> code. Why TypeScript? For me, the main reason is compile time errors. I like that I can have classes and interfaces which usage will be checked by compiler at development time and I will see the mistakes before I run the app. Also it is worth to mention that TypeScript supports almost all features of the the <a href="https://github.com/lukehoban/es6features#readme">ECMAScript 6</a> which is also good because investing time in TypeScript now I will be up to date with the latest standard available.</p>

<p>I also strongly believe that it is critically important to run code generation on every build and have no auto-generated things committed in a source control. This approach minimizes the probability of mistakes made by engineers (yes, I&#8217;ve had experience when warnings like <code>// This code was auto-generated</code> were ignored).</p>

<h3>Code</h3>

<p>Since I&#8217;m going to generate classes I have to describe the metadata I need. This would be the name of the interface/enum and a list of its members:</p>

<figure class='code'><figcaption><span>Metadata Classes - MetadataModels.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">internal</span> <span class="k">enum</span> <span class="n">DtoTypeKind</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Interface</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Enum</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Class</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">DtoType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">DtoTypeKind</span> <span class="n">Kind</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">DtoMember</span><span class="p">&gt;</span> <span class="n">Members</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">DtoMember</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">Type</span> <span class="n">Type</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MetadataHelper</code> class is the heart of solution - it will extract the data needed for codegeneration using reflection:</p>

<figure class='code'><figcaption><span>MetadataHelper.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">internal</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MetadataHelper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="n">DtoType</span><span class="p">[]</span> <span class="nf">GetDtoTypesMetadata</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;</span> <span class="n">types</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">types</span>
</span><span class='line'>          <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">t</span><span class="p">.</span><span class="n">IsAbstract</span><span class="p">)</span> <span class="c1">// We are not interested in abstract classes</span>
</span><span class='line'>          <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">GetCustomAttribute</span><span class="p">&lt;</span><span class="n">DataContractAttribute</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">DtoType</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">Name</span> <span class="p">=</span> <span class="n">t</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
</span><span class='line'>              <span class="c1">// struct =&gt; interface</span>
</span><span class='line'>              <span class="c1">// class =&gt; class</span>
</span><span class='line'>              <span class="c1">// enum =&gt; enum. Must check for enum first because it is a ValueType and we want to avoid enums to be generaed as interfaces</span>
</span><span class='line'>              <span class="n">Kind</span> <span class="p">=</span> <span class="n">t</span><span class="p">.</span><span class="n">IsEnum</span>
</span><span class='line'>                      <span class="p">?</span> <span class="n">DtoTypeKind</span><span class="p">.</span><span class="n">Enum</span>
</span><span class='line'>                      <span class="p">:</span> <span class="n">t</span><span class="p">.</span><span class="n">IsValueType</span>
</span><span class='line'>                          <span class="p">?</span> <span class="n">DtoTypeKind</span><span class="p">.</span><span class="n">Interface</span>
</span><span class='line'>                          <span class="p">:</span> <span class="n">DtoTypeKind</span><span class="p">.</span><span class="n">Class</span><span class="p">,</span>
</span><span class='line'>              <span class="n">Members</span> <span class="p">=</span> <span class="n">t</span><span class="p">.</span><span class="n">IsEnum</span> <span class="c1">// For enum types we should get its values except the &quot;value__&quot; field</span>
</span><span class='line'>                  <span class="p">?</span> <span class="n">t</span><span class="p">.</span><span class="n">GetFields</span><span class="p">()</span>
</span><span class='line'>                      <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">f</span> <span class="p">=&gt;</span> <span class="n">f</span><span class="p">.</span><span class="n">GetCustomAttribute</span><span class="p">&lt;</span><span class="n">DataMemberAttribute</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">f</span><span class="p">.</span><span class="n">Name</span> <span class="p">!=</span> <span class="s">&quot;value__&quot;</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">f</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">DtoMember</span>
</span><span class='line'>                      <span class="p">{</span>
</span><span class='line'>                          <span class="n">Name</span> <span class="p">=</span> <span class="n">f</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">Type</span> <span class="p">=</span> <span class="n">f</span><span class="p">.</span><span class="n">FieldType</span>
</span><span class='line'>                      <span class="p">})</span>
</span><span class='line'>                  <span class="p">:</span> <span class="n">t</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">GetCustomAttribute</span><span class="p">&lt;</span><span class="n">DataMemberAttribute</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">DtoMember</span>
</span><span class='line'>                      <span class="p">{</span>
</span><span class='line'>                          <span class="n">Name</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">Type</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">PropertyType</span>
</span><span class='line'>                      <span class="p">})</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To be able to parameterize and run codegeneration on every build I&#8217;m using preprocessed T4 templates (for more information on topic please refer to the Oleg Sych&#8217;s <a href="http://www.olegsych.com/2009/09/t4-preprocessed-text-templates/">Understanding T4: Preprocessed Text Templates</a> blog post). Preprocessed template generates a partial class that I&#8217;ll be able to extend with metadata I need:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">internal</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">TypesGenerator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">DtoType</span><span class="p">[]</span> <span class="n">DtoTypes</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">DtoType</span><span class="p">&gt;</span> <span class="n">Interfaces</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">DtoTypes</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Kind</span> <span class="p">==</span> <span class="n">DtoTypeKind</span><span class="p">.</span><span class="n">Class</span> <span class="p">||</span> <span class="n">t</span><span class="p">.</span><span class="n">Kind</span> <span class="p">==</span> <span class="n">DtoTypeKind</span><span class="p">.</span><span class="n">Interface</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">DtoType</span><span class="p">&gt;</span> <span class="n">Enums</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">DtoTypes</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Kind</span> <span class="p">==</span> <span class="n">DtoTypeKind</span><span class="p">.</span><span class="n">Enum</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the actual template. It also contains a helper method that translates .NET types to the corresponding TypeScript type names.</p>

<figure class='code'><figcaption><span>T4 Template - TypesGenerator.tt </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;</span><span class="err">#@</span> <span class="n">template</span> <span class="n">language</span><span class="p">=</span><span class="s">&quot;C#&quot;</span> <span class="n">visibility</span><span class="p">=</span><span class="s">&quot;internal&quot;</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#@</span> <span class="n">assembly</span> <span class="n">name</span><span class="p">=</span><span class="s">&quot;System.Core&quot;</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#@</span> <span class="n">import</span> <span class="n">namespace</span><span class="p">=</span><span class="s">&quot;System.Collections.Generic&quot;</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'><span class="c1">//------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1">// &lt;auto-generated&gt;</span>
</span><span class='line'><span class="c1">//     This code was generated by a tool.</span>
</span><span class='line'><span class="c1">//     Runtime Version: &lt;#= Environment.Version #&gt;</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//     Changes to this file may cause incorrect behavior and will be lost if</span>
</span><span class='line'><span class="c1">//     the code is regenerated.</span>
</span><span class='line'><span class="c1">// &lt;/auto-generated&gt;</span>
</span><span class='line'><span class="c1">//------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Interfaces</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span> <span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">@interface</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="n">Interfaces</span><span class="p">)</span> <span class="p">{</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">export</span> <span class="k">interface</span> <span class="p">&lt;</span><span class="err">#</span><span class="p">=</span> <span class="n">@interface</span><span class="p">.</span><span class="n">Name</span> <span class="err">#</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span>    <span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">member</span> <span class="k">in</span> <span class="n">@interface</span><span class="p">.</span><span class="n">Members</span><span class="p">)</span> <span class="p">{</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span><span class="err">#</span><span class="p">=</span> <span class="n">member</span><span class="p">.</span><span class="n">Name</span><span class="err">#</span><span class="p">&gt;?:</span> <span class="p">&lt;</span><span class="err">#</span><span class="p">=</span> <span class="n">GetTypeScriptFieldTypeName</span><span class="p">(</span><span class="n">member</span><span class="p">.</span><span class="n">Type</span><span class="p">)</span> <span class="err">#</span><span class="p">&gt;;</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span>    <span class="p">}</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span> <span class="p">}</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Enums</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span> <span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">@enum</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="n">Enums</span><span class="p">)</span> <span class="p">{</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">export</span> <span class="k">enum</span> <span class="p">&lt;</span><span class="err">#</span><span class="p">=</span> <span class="n">@enum</span><span class="p">.</span><span class="n">Name</span> <span class="err">#</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span>    <span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">member</span> <span class="k">in</span> <span class="n">@enum</span><span class="p">.</span><span class="n">Members</span><span class="p">)</span> <span class="p">{</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span><span class="err">#</span><span class="p">=</span> <span class="n">member</span><span class="p">.</span><span class="n">Name</span> <span class="err">#</span><span class="p">&gt;</span> <span class="p">=</span> <span class="p">&lt;</span><span class="err">#</span><span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Enum</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">member</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">member</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="err">#</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span>    <span class="p">}</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span> <span class="p">}</span> <span class="err">#</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;</span><span class="err">#</span><span class="p">+</span>
</span><span class='line'>  <span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>  <span class="c1">/// Returns a corresponding TypeScript type for a given .NET type</span>
</span><span class='line'>  <span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetTypeScriptFieldTypeName</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">numberTypes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">typeof</span><span class="p">(</span><span class="kt">sbyte</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">byte</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">short</span><span class="p">),</span>
</span><span class='line'>          <span class="k">typeof</span><span class="p">(</span><span class="kt">ushort</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">uint</span><span class="p">),</span>
</span><span class='line'>          <span class="k">typeof</span><span class="p">(</span><span class="kt">long</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">ulong</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">float</span><span class="p">),</span>
</span><span class='line'>          <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">decimal</span><span class="p">)</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">stringTypes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">typeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">string</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">Guid</span><span class="p">)</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">isCollectionType</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// Check if it is a generic. We support only generics which are compatible with IEnumerable&lt;T&gt; and have only one generic argument</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">type</span><span class="p">.</span><span class="n">IsGenericType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(!</span><span class="k">typeof</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;).</span><span class="n">IsAssignableFrom</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">type</span><span class="p">.</span><span class="n">GetGenericArguments</span><span class="p">().</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;The generic type {0} must implement IEnumerable&lt;T&gt; and must have no more than 1 generic argument.&quot;</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">FullName</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="c1">// strip the generic type leaving the first generic argument</span>
</span><span class='line'>          <span class="n">type</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">GetGenericArguments</span><span class="p">()[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>          <span class="n">isCollectionType</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Check if it is a primitive type</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">numberTypes</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">type</span><span class="p">))</span> <span class="n">result</span> <span class="p">=</span> <span class="s">&quot;number&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">stringTypes</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">type</span><span class="p">))</span> <span class="n">result</span> <span class="p">=</span> <span class="s">&quot;string&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">type</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">bool</span><span class="p">))</span> <span class="n">result</span> <span class="p">=</span> <span class="s">&quot;boolean&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// It is enum/class/struct -&gt; return its name as-is</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">result</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">isCollectionType</span><span class="p">)</span> <span class="n">result</span> <span class="p">+=</span> <span class="s">&quot;[]&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">#</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the usage is very simple. I&#8217;ve created a console application which could be launched for example on CI server during the build.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">IndexOfAny</span><span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">GetInvalidPathChars</span><span class="p">())</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;Invalid argument. First argument should be a valid file path.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">var</span> <span class="n">fileName</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">typesMetadata</span> <span class="p">=</span> <span class="n">MetadataHelper</span><span class="p">.</span><span class="n">GetDtoTypesMetadata</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Todo</span><span class="p">).</span><span class="n">Assembly</span><span class="p">.</span><span class="n">ExportedTypes</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">typesGenerator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TypesGenerator</span> <span class="p">{</span> <span class="n">DtoTypes</span> <span class="p">=</span> <span class="n">typesMetadata</span> <span class="p">};</span>
</span><span class='line'>  <span class="n">File</span><span class="p">.</span><span class="n">WriteAllText</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">typesGenerator</span><span class="p">.</span><span class="n">TransformText</span><span class="p">().</span><span class="n">Trim</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>As you can see with a very little effort I&#8217;ve got a working and open to any customizations codegenerator. As always the code from this post is available on <a href="https://github.com/manekovskiy/webapi-typescript-proxy-generator">Github</a>. Feel free to clone and adjust to your needs.</p>

<p>Keep the code simple!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I've Fixed My Dell Inspiron Overheating Issues]]></title>
    <link href="http://amanek.com/how-ive-fixed-my-dell-inspiron-overheating-issues/"/>
    <updated>2015-03-14T19:37:00-07:00</updated>
    <id>http://amanek.com/how-ive-fixed-my-dell-inspiron-overheating-issues</id>
    <content type="html"><![CDATA[<p>Last summer I started experiencing issues when working on CPU bound tasks on my laptop. At first I thought that the main cause was the summer heat - it was 30&deg;C (86&deg;F) at the time when I first noticed my laptop automatically shut down because of overheating. But then when temperature went down and occasional shutdowns didn&#8217;t stopped I understood that I have a real problem.</p>

<p><img class="right" src="http://amanek.com/images/posts/dell-inpiron-n5110.jpg" title="Dell Inspiron N5110" alt="Dell Inspiron N5110">
I own Dell Inspiron N5110 which has Intel Core i7-2670QM CPU and NVidia GeForce GT 525M dedicated GPU. Browsing over the Internet showed that I&#8217;m not the only one with such issue. But there was no consistent/believable explanation/guide of why laptop started overheating and how to fix it. One part of the community was just blaming Dell&#8217;s greediness and/or cooling system which was not designed for such powerful CPU as i7 and another was suggesting to replace the thermal grease and through the power management controls decrease max speed of the CPU. I already knew how to disassemble my laptop (previously I had to replace my stock HDD which is not fast or easy operation when you own a Dell laptop) so I&#8217;ve decided to replace the thermal grease first and then try to understand and maybe even fix engineering blunders in cooling system.</p>

<blockquote><p>Running ahead of the story I want to say that I&#8217;ve successfully accomplished both tasks and reduced overall temperature of my CPU by 20&deg;C (68&deg;F) resulting in stable 50&deg;C (122&deg;F) when idle and 85-90&deg;C (185-194&deg;F) under continuous 100% load.</p></blockquote>

<h2>Step 1: Clean the dust and replace the thermal grease</h2>

<p>The things you&#8217;ll need:</p>

<ul>
<li>The thermal grease. For those who is interested I was using <a href="http://bit.ly/1FPIiVf">Zalman ZM-STG2</a>.</li>
<li>The <a href="http://bit.ly/1dVPdvO">Dell Inspiron N5110 Service Manual</a>. This is a &#8220;must&#8221; if you never saw the &#8220;innards&#8221; of your laptop. You&#8217;ll have to follow the steps from &#8220;Removing the Thermal-Cooling Assembly&#8221; section (see page 75). Friendly tip: print pages with necessary steps as it is hard to remember everything when disassembling laptop for the first time. <br />
I&#8217;m sure that there are also plenty of video guides showing how to do this, but being a bit of old school I prefer reading over watching so I cannot recommend any video guide.</li>
</ul>


<p>It turned out that stock thermal grease became rock solid and was no longer able to do its work. I used a 70% isopropyl alcohol to remove it.</p>

<p><img class="center" src="http://amanek.com/images/posts/rock-solid-stock-thermal-grease.jpg" title="Rock solid thermal grease on CPU and GPU" alt="Rock solid thermal grease on CPU and GPU"></p>

<p>The fan was also full of dirt. The sad fact is that you cannot open fan case without removing the whole cooling system. This means that every time you want to clean it from dirt and dust you&#8217;ll have to replace the thermal grease.</p>

<p><img class="center" src="http://amanek.com/images/posts/dirt-in-fan.jpg" title="Dirt inside cooling fan" alt="Dirt inside cooling fan"></p>

<p>So after I&#8217;ve replaced the thermal grease and cleaned the fan the CPU temperature decreased by around 15&deg;C (59&deg;F). That was a big win.</p>

<h2>Step 2: Fix the airflow inside the cooling system</h2>

<p>After two weeks I decided to try to make air flow inside the laptop more streamlined. First thing I did - closed the hole in motherboard with a piece of thick paper. The idea was to minimize the amount of hot air going under my keyboard which sometimes was making it too hot to work with it normally.</p>

<p><img class="center" src="http://amanek.com/images/posts/fan-hole-in-motherboard.jpg" title="Dell Inspiron N5110" alt="Dell Inspiron N5110"></p>

<p>Secondly I decided to fix the air intake. From my point of view it has two issues:</p>

<ol>
<li>For some reason a piece of plastic was covering the 25% of the air intake grid. So I&#8217;ve just cut it away with the paper knife.</li>
</ol>


<p><img class="center" src="http://amanek.com/images/posts/plastic-cover-over-air-intake.jpg" title="Plastic cover over air intake" alt="Plastic cover over air intake">
<img class="center" src="http://amanek.com/images/posts/plastic-cover-over-air-intake-removed.jpg" title="Plastic cover over air intake removed" alt="Plastic cover over air intake removed">
2. There was a gap of 7mm (~0.25&quot;) between the motherboard and the grid so I&#8217;ve made a compactor from the little piece of linoleum. I&#8217;m sure something thick enough like a piece of foam rubber would also work as the idea is to streamline the air intake and do not allow the hot air from the laptop to be taken again.</p>

<p><img class="center" src="http://amanek.com/images/posts/linoleum-compactor.jpg" title="ll be used as a compactor" alt="A piece of linoleum that"></p>

<p>I just glued the pieces of linoleum to the laptop case and made something that looks like a well.</p>

<p><img class="center" src="http://amanek.com/images/posts/linoleum-compactor-applied.jpg" title="Linoleum compactor applied" alt="Linoleum compactor applied"></p>

<p>This gave me a little improvement of around 4-5&deg;C (41&deg;F). Not much but still better than nothing.</p>

<h2>Conslusions</h2>

<p>Replacement of the thermal grease and cleaning of the fan from dust is a must if you want to fix the overheating issues. Attempts to improve the air intake could also help to lower the temperature but not much.</p>

<p>Anyways you will not lose anything from trying to make things better.</p>

<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Configure ComEmu Task for GitHub for Windows Portable Git]]></title>
    <link href="http://amanek.com/how-to-configure-comemu-task-for-github-for-windows-portable-git/"/>
    <updated>2014-07-20T11:58:00-07:00</updated>
    <id>http://amanek.com/how-to-configure-comemu-task-for-github-for-windows-portable-git</id>
    <content type="html"><![CDATA[<blockquote><p><strong>2/19/2015 Update:</strong> I&#8217;ve decided that it would be good to propose the change described in this post to the <a href="https://github.com/msysgit/msysgit">msysgit</a> project. And today it was accepted and merged.
It took me only 7 months to come up with idea that the change described below could be included into the official release of the software that I&#8217;m using on a daily basis :)</p></blockquote>

<p>Maybe a year or something ago I switched from <a href="http://sourceforge.net/projects/console/files/">Console2</a> to <a href="http://code.google.com/p/conemu-maximus5/">ConEmu</a>. One of the reasons behind this switch was a <a href="http://code.google.com/p/conemu-maximus5/wiki/SettingsTasks">Task</a> concept that ConEmu offered.</p>

<p>There was only one problem with my tasks setup - I wanted to launch Portable Git which is a part of GitHub for Windows installation inside ConEmu. But launching the <code>git-cmd.bat</code> from ConEmu will create a new  window.</p>

<blockquote><p>As you may know Portable Git binaries are located in  <code>%LOCALAPPDATA%\GitHub\PortableGit_054f2e797ebafd44a30203088cd3d58663c627ef\</code>
Note that the last part of the directory name is a version string so it could change in future.</p></blockquote>

<p>The problem lies in the last line of the <code>git-cmd.bat</code> file:</p>

<figure class='code'><figcaption><span>git-cmd.bat </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span>rem <span class="k">Do</span> not use <span class="s2">&quot;echo off&quot;</span> to not affect any child calls.
</span><span class='line'><span class="p">@</span><span class="k">setlocal</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span>rem Get the abolute path to the current directory<span class="p">,</span> which is assumed to be the
</span><span class='line'><span class="p">@</span>rem Git installation root.
</span><span class='line'><span class="p">@</span><span class="k">for</span> <span class="n">/F</span> <span class="s2">&quot;delims=&quot;</span> <span class="nv">%%I</span> in (<span class="s2">&quot;%~dp0&quot;</span>) <span class="k">do</span> @<span class="k">set</span> <span class="nv">git_install_root</span><span class="o">=</span><span class="nv">%%~fI</span>
</span><span class='line'><span class="p">@</span><span class="k">set</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">%git_install_root%</span>\bin;<span class="nv">%git_install_root%</span>\mingw\bin;<span class="nv">%git_install_root%</span>\cmd;<span class="nv">%PATH%</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">if</span> not <span class="k">exist</span> <span class="s2">&quot;%HOME%&quot;</span> @<span class="k">set</span> <span class="nv">HOME</span><span class="o">=</span><span class="nv">%HOMEDRIVE%%HOMEPATH%</span>
</span><span class='line'><span class="p">@</span><span class="k">if</span> not <span class="k">exist</span> <span class="s2">&quot;%HOME%&quot;</span> @<span class="k">set</span> <span class="nv">HOME</span><span class="o">=</span><span class="nv">%USERPROFILE%</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">set</span> <span class="nv">PLINK_PROTOCOL</span><span class="o">=</span>ssh
</span><span class='line'><span class="p">@</span><span class="k">if</span> not <span class="k">defined</span> TERM <span class="k">set</span> <span class="nv">TERM</span><span class="o">=</span>msys
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">cd</span> <span class="nv">%HOME%</span>
</span><span class='line'><span class="p">@</span>start <span class="nv">%COMSPEC%</span>
</span></code></pre></td></tr></table></div></figure>


<p>To fix the issue replace last line <code>@start %COMSPEC%</code> with <code>@call %COMSPEC%</code>.</p>

<blockquote><p>This change will <strong>not</strong> break the existing &#8220;Open in Git Shell&#8221; context action in GitHub application GUI.</p></blockquote>

<p>The difference between <code>start</code> and <code>call</code> commands is that <code>call</code> runs the batch script inside the same shell instance while <code>start</code> creates a new instance. Here is a little fragment from <code>start</code> and <code>call</code> help:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\>call /?
</span><span class='line'>Calls one batch program from another.
</span><span class='line'>
</span><span class='line'>C:\>start /?
</span><span class='line'>Starts a separate window to run a specified program or command.</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it! Now following task for ConEmu will work as expected:</p>

<p><code>*cmd /k Title Git &amp; "%LOCALAPPDATA%\GitHub\PortableGit_054f2e797ebafd44a30203088cd3d58663c627ef\git-cmd.bat"</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automate your dev environment setup]]></title>
    <link href="http://amanek.com/automate-your-dev-environment-setup/"/>
    <updated>2013-09-14T19:03:00-07:00</updated>
    <id>http://amanek.com/automate-your-dev-environment-setup</id>
    <content type="html"><![CDATA[<p>Every time I need to install and configure developer environment on a fresh OS (either on real or virtual machine) I feel irritated by the fact that I need to spend almost all my day just clicking around various installation dialogs confirming destination folders, accepting user agreements (that I can bet no one even tried to read fully) and performing other repetitive and almost pointless tasks.</p>

<p>I&#8217;m developer, I&#8217;m creating things (or at least trying to), so why would I waste my time doing dull and pointless work?! Ah, and why should I keep in mind (or in notepad, &#8220;installs&#8221; folder, etc.) a list of my tools and installation packages?</p>

<p>But honestly, I just cannot resist or give a single reason why this shouldn&#8217;t be automated. Said it - did it. And here are my adventures.</p>

<h2>Let&#8217;s get Chocolatey?</h2>

<p>Maybe you&#8217;ve heard about <a href="http://chocolatey.org/" title="Chocolatey website">Chocolatey</a>. In short this tool is like <a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool" title="Wiki page for apt-get">apt-get</a> but for Windows and it is built on top of NuGet.</p>

<blockquote><p>For those who are not familiar with NuGet and all variety of tools around it take a look at <a href="http://www.codeproject.com/Reference/628210/An-Overview-of-the-NuGet-Ecosystem">An Overview of the NuGet Ecosystem</a> article by Xavier Decoster.</p>

<p>For a quick Chocolatey overview I can recommend Scott Hanselman&#8217;s post <a href="http://www.hanselman.com/blog/IsTheWindowsUserReadyForAptget.aspx">Is the Windows user ready for apt-get</a>?</p></blockquote>

<p>As of time of writing Chocolatey had 1,244 unique packages which is pretty cool - it is really hard to find package that does not exist there.</p>

<p>After a little search it appeared that I can even install Visual Studio with Chocolatey. Okay, cool, let&#8217;s do this.</p>

<h3>No Battle Plan Survives Contact With the Enemy</h3>

<p>I tried to install my first package on a fresh Windows 8 virtual machine and failed on the very first step. Jumping ahead of the story partially that was my fail but let&#8217;s roll on.</p>

<p>I wanted no more no less - install <a href="http://chocolatey.org/packages/VisualStudio2013Ultimate" title="VS 2013 chocolatey package">Visual Studio 2013 Ultimate Preview</a> and see its new shining features for web devs. As described on site I installed Chocolatey and run <code>cinst VisualStudio2013Ultimate</code> command. Package downloaded, and .NET 4.5.1 installation started. Boom! I got my first error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ERROR] Exception calling "Start" with "1" argument(s): "The operation was canceled by the user"</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://amanek.com/images/posts/win8-chocolatey-net451-error.png" title="Chocolatey .NET 4.5.1 installation error" alt="Chocolatey .NET 4.5.1 installation error"></p>

<p>After some research it appeared that by default Windows 8 processes are not launched with administrator privileges (even if current user is member of Administrator group) and because of silent installation mode (read &#8220;non-UI mode&#8221;) UAC prompt was not showed and attempt to elevate rights was cancelled by default. To fix this issue I had to disable UAC notifications. I have spent quite time searching the cause of my issue and decided to table VS 2013 for now and proceed with installation of the Visual Studio 2012 instead.</p>

<p>To install 90 day trial of Visual Studio 2012 Ultimate I run <code>cinst VisualStudio2012Ultimate</code> command and after a little pause and some blinking of standard installation dialog another crazy error appeared:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blah-blah-blah. Exit code was '-2147185721'</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://amanek.com/images/posts/win8-chocolatey-vs2012-error-1.png" title="Chocolatey VS 2012 installation error" alt="Chocolatey VS 2012 installation error"></p>

<p>Thankfully, I have experience with silent installations of Visual Studio and I have a link to <a href="http://msdn.microsoft.com/en-us/library/vstudio/ee225238.aspx" title="Visual Studio Administrator Guide on MSDN">Visual Studio Administrator Guide</a> in my bookmarks which contains a list of exit codes for installation package. <code>-2147185721</code> code is &#8221;<em>Incomplete - Reboot Required</em>&#8221;. That sounded logically. <code>/NoRestart</code> switch in VS chocolatey install script setup was automatically cancelled and returned non-zero value which was treated as error. Okay, rebooted the machine.</p>

<p>But this was not my last error :). After reboot using <code>-force</code> parameter I resumed installation process of the Visual Studio and got my next error (extracted from installation log <code>vs.log</code> file):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[0824:0820][2013-09-14T12:56:04]: Applied execute package: vcRuntimeDebug_x86, result: 0x0, restart: None
</span><span class='line'>[082C:09C4][2013-09-14T12:56:04]: Registering dependency: {ae17ae9b-af38-40d2-a194-6102c56ed502} on package provider: Microsoft.VS.VC_RuntimeDebug_x86,v11, package: vcRuntimeDebug_x86
</span><span class='line'>[082C:0850][2013-09-14T12:56:12]: Error 0x80070490: Failed to find expected public key in certificate chain.</span></code></pre></td></tr></table></div></figure>


<p>The last words from &#8220;chocolatey gods&#8221; were <code>Exit code was '1603'</code>.</p>

<p>This time nothing came to my mind except trying to install updates on Windows first (words &#8220;certificate chain&#8221; lead me to this idea). As it turned out that was the case and my great mistake not to install updates first.</p>

<blockquote><p>Moral: never try to install something serious unless you have all updates for your OS installed.</p></blockquote>

<p>After all these errors I decided to rollback my virtual machine back to the initial state and start from scratch. This time I installed all Windows updates and after I finished all Chocolatey packages were installed without any errors.</p>

<h2>Share all the scripts!</h2>

<p><img class="right" src="http://amanek.com/images/posts/share-all-the-scripts.jpg" title="Share all the scripts!" alt="Share all the scripts!"></p>

<p>After I finished with my journey I decided that it would be great to keep my scripts in one place and have a possibility to share them. I cannot find any better service for this but Github. Now I can share my scripts, update them, have a history of changes, make tags and special branches for some specific setups. Isn&#8217;t this great and how it should be?</p>

<p>Go fork <a href="https://github.com/manekovskiy/devenv-setup-scripts" title="devenv-setup-scripts project page">my repository</a> and start making your life easier!</p>

<h2>Conclusions</h2>

<p>Here I did only first steps on the road to the bright future of the automated environment setup. And while we can use Chocolatey to save time with installations we still need to configure the stuff. Of course if you are using default settings this is not a problem but unfortunatelly this is not my case ;)</p>

<p>I think in my next post I will share my experience in automated configurations trasferring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Web Forms Routing With Custom Attributes]]></title>
    <link href="http://amanek.com/configuring-web-forms-routing-with-custom-attributes/"/>
    <updated>2012-12-23T10:00:20-08:00</updated>
    <id>http://amanek.com/configuring-web-forms-routing-with-custom-attributes</id>
    <content type="html"><![CDATA[<blockquote><p><strong>1/13/2013 Update:</strong> Now <em>PhysicalFile</em> property is filled and updated automatically, using <a href="https://github.com/manekovskiy/Web-Forms-Routing-Through-Attributes/blob/master/PhysicalFilePathUpdater.tt">T4 template</a>. Say good-bye to issues caused by typos and copy-pasting.</p></blockquote>

<p>Recently I had to add routing to existent ASP.NET Web Forms application. I was (and I suppose I&#8217;m still) new to this thing so I started from <a href="http://msdn.microsoft.com/en-us/library/dd329551(v=vs.100).aspx">Walkthrough: Using ASP.NET Routing in a Web Forms Application</a> and it seemed fine until I started coding.</p>

<p>The site was nothing special but approximately 50 pages. And when I started configuring all these pages it felt wrong - I was lost in all these route names, defaults and constraints. If it felt wrong, I thought, why not to try something else. I googled around and found a pretty good thing - <a href="http://nuget.org/packages/Microsoft.AspNet.FriendlyUrls">ASP.NET FriendlyUrls</a>. Scott Hanselman wrote about this in his <a href="http://www.hanselman.com/blog/IntroducingASPNETFriendlyUrlsCleanerURLsEasierRoutingAndMobileViewsForASPNETWebForms.aspx">Introducing ASP.NET FriendlyUrls - cleaner URLs, easier Routing, and Mobile Views for ASP.NET Web Forms</a> post. At first glance it looked far easier and better, but I wanted to use <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.routeparameter(v=vs.100).aspx"><em>RouteParameters</em></a> for my <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.datasourcecontrol.aspx"><em>datasource</em></a> controls on pages. ASP.NET FriendlyUrls are providing only &#8220;URL segment&#8221; concept - string that could be extracted from URL (string between &#8216;/&#8217; characters in URL). URL Segments could not be constrained and thus automatically validated. Also, segments could not have names, so my idea to use <em>RouteParameter</em> would be killed if I&#8217;d go with ASP.NET FriendlyUrls.</p>

<p>At the end of this little investigation I thought that it would be easier to tie together route configuration with page class via custom attribute and conventionally named properties for defaults and constraints. So every page class gets its routing configuration as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">RoutingWithAttributes.Foo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na"> [MapToRoute(RouteUrl = &quot;Foo/Edit/{id}&quot;)]</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Edit</span> <span class="p">:</span> <span class="n">Page</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="n">RouteValueDictionary</span> <span class="n">Defaults</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">get</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="k">new</span> <span class="n">RouteValueDictionary</span> <span class="p">{</span> <span class="p">{</span> <span class="s">&quot;id&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span> <span class="p">}</span> <span class="p">};</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="n">RouteValueDictionary</span> <span class="n">Constraints</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">get</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="k">new</span> <span class="n">RouteValueDictionary</span> <span class="p">{</span> <span class="p">{</span> <span class="s">&quot;id&quot;</span><span class="p">,</span> <span class="s">&quot;^[0-9]*$&quot;</span> <span class="p">}</span> <span class="p">};</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above states that <em>Edit </em>page in folder <em>Foo</em> of my <em>RoutingWithAttributes</em> web application will be accessible through <em>http://&lt;application-url>/Foo/Edit</em> hyperlink with optional <em>id</em> parameter<em>.</em> Default value for <em>id </em>parameter is empty string but it should be integer number if provided.</p>

<p>For me this works better, it is self describing and I&#8217;m not forced to go to some <em>App_Start\RoutingConfig.cs</em> file and search for it. Now how it is working under the hood? Nothing new or special - just a bit of reflection on <em>Application_Start</em> event. And routes are still registered with <em><a href="http://msdn.microsoft.com/en-us/library/system.web.routing.routecollection.mappageroute(v=vs.100).aspx">RouteCollection.MapPageRoute</a> </em>method.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">void</span> <span class="nf">Application_Start</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">RouteConfig</span><span class="p">.</span><span class="n">RegisterRoutes</span><span class="p">(</span><span class="n">RouteTable</span><span class="p">.</span><span class="n">Routes</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">RouteConfig</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">RegisterRoutes</span><span class="p">(</span><span class="n">RouteCollection</span> <span class="n">routes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">mappedPages</span> <span class="p">=</span> <span class="n">Assembly</span><span class="p">.</span><span class="n">GetAssembly</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">RouteConfig</span><span class="p">))</span>
</span><span class='line'>              <span class="p">.</span><span class="n">GetTypes</span><span class="p">()</span>
</span><span class='line'>              <span class="p">.</span><span class="n">AsEnumerable</span><span class="p">()</span>
</span><span class='line'>              <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">type</span> <span class="p">=&gt;</span> <span class="n">type</span><span class="p">.</span><span class="n">GetCustomAttributes</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">MapToRouteAttribute</span><span class="p">),</span> <span class="k">false</span><span class="p">).</span><span class="n">Length</span> <span class="p">==</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">pageType</span> <span class="k">in</span> <span class="n">mappedPages</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">defaultsProperty</span> <span class="p">=</span> <span class="n">pageType</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="s">&quot;Defaults&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">defaults</span> <span class="p">=</span> <span class="n">defaultsProperty</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="p">(</span><span class="n">RouteValueDictionary</span><span class="p">)</span><span class="n">defaultsProperty</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">var</span> <span class="n">constraintsProperty</span> <span class="p">=</span> <span class="n">pageType</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="s">&quot;Constraints&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">constraints</span> <span class="p">=</span> <span class="n">constraintsProperty</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="p">(</span><span class="n">RouteValueDictionary</span><span class="p">)</span><span class="n">constraintsProperty</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">var</span> <span class="n">dataTokensProperty</span> <span class="p">=</span> <span class="n">pageType</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="s">&quot;DataTokens&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">dataTokens</span> <span class="p">=</span> <span class="n">dataTokensProperty</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="p">(</span><span class="n">RouteValueDictionary</span><span class="p">)</span><span class="n">dataTokensProperty</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">var</span> <span class="n">routeAttribute</span> <span class="p">=</span> <span class="p">(</span><span class="n">MapToRouteAttribute</span><span class="p">)</span><span class="n">pageType</span><span class="p">.</span><span class="n">GetCustomAttributes</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">MapToRouteAttribute</span><span class="p">),</span> <span class="k">false</span><span class="p">)[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">routeAttribute</span><span class="p">.</span><span class="n">RouteUrl</span><span class="p">))</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullReferenceException</span><span class="p">(</span><span class="s">&quot;RouteUrl property cannot be null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">routeAttribute</span><span class="p">.</span><span class="n">PhysicalFile</span><span class="p">))</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullReferenceException</span><span class="p">(</span><span class="s">&quot;PhysicalFile property cannot be null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(!</span><span class="n">VirtualPathUtility</span><span class="p">.</span><span class="n">IsAppRelative</span><span class="p">(</span><span class="n">routeAttribute</span><span class="p">.</span><span class="n">PhysicalFile</span><span class="p">))</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;Property should be application relative URL&quot;</span><span class="p">,</span> <span class="s">&quot;PhysicalFile&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">routes</span><span class="p">.</span><span class="n">MapPageRoute</span><span class="p">(</span><span class="n">pageType</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">routeAttribute</span><span class="p">.</span><span class="n">RouteUrl</span><span class="p">,</span> <span class="n">routeAttribute</span><span class="p">.</span><span class="n">PhysicalFile</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="n">defaults</span><span class="p">,</span> <span class="n">constraints</span><span class="p">,</span> <span class="n">dataTokens</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Route name is equal to the <em>FullName</em> property of page type. Since <a href="http://msdn.microsoft.com/en-us/library/system.type.fullname.aspx"><em>Type.FullName</em></a> includes both namespace and class name it guarantees route name uniqueness across the application.</p>

<p>To utilize route links generation I had to create two extension methods for <em>Page</em> class. These methods are just wrappers for <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.getrouteurl(v=vs.100).aspx"><em>Page.GetRouteUrl</em></a> method.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">PageExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetMappedRouteUrl</span><span class="p">(</span><span class="k">this</span> <span class="n">Page</span> <span class="n">thisPage</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetPageType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">routeParameters</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">thisPage</span><span class="p">.</span><span class="n">GetRouteUrl</span><span class="p">(</span><span class="n">targetPageType</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">routeParameters</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetMappedRouteUrl</span><span class="p">(</span><span class="k">this</span> <span class="n">Page</span> <span class="n">thisPage</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetPageType</span><span class="p">,</span> <span class="n">RouteValueDictionary</span> <span class="n">routeParameters</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">thisPage</span><span class="p">.</span><span class="n">GetRouteUrl</span><span class="p">(</span><span class="n">targetPageType</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">routeParameters</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now I can generate link to <em>Foo.Edit</em> page as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='aspx-cs'><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;</span><span class="nt">&lt;%=</span> <span class="n">Page</span><span class="p">.</span><span class="n">GetMappedRouteUrl</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">RoutingWithAttributes</span><span class="p">.</span><span class="n">Foo</span><span class="p">.</span><span class="n">Edit</span><span class="p">),</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="m">1</span> <span class="p">})</span> <span class="nt">%&gt;</span>&#39;&gt;Foo.Edit<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it will produce <em>http://&lt;application-url>/Foo/Edit/1</em> link.</p>

<p>Described approach helped me to accomplish task without frustration and I&#8217;m satisfied with the results.</p>

<p>Code for this article is <a href="https://github.com/manekovskiy/Web-Forms-Routing-Through-Attributes">hosted on GitHub</a> feel free to use it if you liked the idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve Your Reading Experience With Instapaper, Calibre and Command Line]]></title>
    <link href="http://amanek.com/improve-your-reading-experience-with-instapaper-calibre-and-command-line/"/>
    <updated>2012-11-17T05:39:17-08:00</updated>
    <id>http://amanek.com/improve-your-reading-experience-with-instapaper-calibre-and-command-line</id>
    <content type="html"><![CDATA[<p>After I read Scott Hanselman&#8217;s post &#8221;<a href="http://www.hanselman.com/blog/InstapaperDeliveredToYourKindleChangesHowYouConsumeWebContentPlusIFTTTBlogsAndMore.aspx">Instapaper delivered to your Kindle changes how you consume web content - Plus IFTTT, blogs and more</a>&#8221; I bethought that I wanted to create an automated <a href="http://www.instapaper.com">Instapaper</a> to my e-book reader &#8220;contend delivery system&#8221;. Now as I finished here is my little story.</p>

<p><img class="right" src="http://amanek.com/images/posts/lbookv5-ereader.jpg" title="LBook V5" alt="LBook V5">Almost a year ago when I started using <a href="http://www.instapaper.com">Instapaper</a> I realized that it would be great to grab all articles that were collected through the week, convert them to <a href="http://en.wikipedia.org/wiki/EPUB">EPUB</a> format and send electronic book to my e-book reader device. The only problem was in my device - <a href="http://lbook.ua/products/lbooks/v5/">Lbook V5</a>. Yes, it is totally outdated and old comparing to Kindle devices. It supports EPUB but does not have access to the Internet, so Instapaper <em>&#8220;download&#8221;</em> feature doesn&#8217;t work for me.</p>

<p>A few month ago I found <a href="http://calibre-ebook.com">Calibre</a> - free and open source e-book library management application. It helped me to organize and manage all my electronic library and I&#8217;m totally happy with it. Calibre has everything that could be possibly needed - scheduler support, custom news source with interactive setup and converters to various e-book formats. But what most interesting and important Calibre has command line <a href="http://manual.calibre-ebook.com/cli/ebook-convert.html"><em>ebook-convert.exe</em></a> utility which could be driven by <em>recipe files</em>. <a href="http://manual.calibre-ebook.com/news.html">Recipes in Calibre</a> are just Python scripts (with a bits of custom logic if it is needed to parse some specific news source).</p>

<p>Below is simple Calibre recipe:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">AdvancedUserRecipe1352822143</span><span class="p">(</span><span class="n">BasicNewsRecipe</span><span class="p">):</span>
</span><span class='line'>  <span class="n">title</span>          <span class="o">=</span> <span class="s">u&#39;Custom News Source&#39;</span>
</span><span class='line'>  <span class="n">oldest_article</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'>  <span class="n">max_articles_per_feed</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'>  <span class="n">auto_cleanup</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">feeds</span> <span class="o">=</span> <span class="p">[(</span><span class="s">u&#39;The title of the feed&#39;</span><span class="p">,</span> <span class="s">u&#39;http://somesite.com/feed&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This defines RSS feed source at <a href="http://somesite.com/feed">http://somesite.com/feed</a> and declares that there should be no more than 100 articles not older than 7 days. If we&#8217;ll use it with <em>ebook-convert</em> utility, it will automatically fetch news from specified feed and will generate e-book file. The command line to generate book is following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>ebook-convert.exe input_file output_file [options]
</span></code></pre></td></tr></table></div></figure>


<p>When <em>input_file</em> parameter is recipe <em>ebook-convert</em> runs it and then produces e-book in specified by <em>output_file</em> parameter format. Recipe should populate <em>feeds</em> dictionary so <em>ebook-convert</em> will know what XML feeds should be processed. Options could accept two parameters - <em>username</em> and <em>password</em> (correct me if I&#8217;m wrong but I didn&#8217;t found any information about possibility to use other/custom parameters). That was a brief introduction to Calibre recipe files. Now here is the problem.</p>

<p>Calibre has built in <a href="http://khromov.wordpress.com/projects/instapaper-calibre-recipe/">Instapaper recipe</a>. This recipe was created by <a href="http://khromov.wordpress.com">Stanislav Khromov</a> with <a href="https://bitbucket.org/lack">Jim Ramsay</a>. Recipe has two versions - stable (it is part of current Calibre release) and development version, both could be found on <a href="https://bitbucket.org/khromov/calibre-instapaper">BitBucket</a>.</p>

<p>The development version of Instapaper recipe does almost what I want, but I needed to extend its functionality including:</p>

<ul>
<li>Grab articles from all pages inside one directory (yes, sometimes it happens, when I&#8217;m not reading Instapaper articles for a few weeks).</li>
<li>Merge articles from certain directories into one book.</li>
<li>Archive all items in directories. This actually implemented in development version, but instead of using <em>&#8220;Archive All&#8230;&#8221;</em> form recipe emulates clicking on <em>&#8220;Move to Archive&#8221;</em> button which takes a lot of time to process all items.</li>
</ul>


<p>At first I decided to extend development version of the mentioned above recipe but after I wasted an hour trying to beat the Python I realized that I can write command line utility in .NET (where I feel myself very comfortable) which will do whatever I want and I will save a ton of time (I&#8217;m definitely not going to learn Python just to change/fix one Calibre recipe :)). So here is <a href="https://github.com/manekovskiy/InstaFeed">InstaFeed</a> - little command line utility that can enumerate names of Instapaper directories, generate single RSS feed for specified list of directories and archive them all at once. It uses two awesome open-source projects - <a href="http://htmlagilitypack.codeplex.com/">Html Agility Pack</a> and <a href="http://commandline.codeplex.com/">Command Line Parser Library</a>.</p>

<blockquote><p>Note: While this utility parses Instapaper HTML and produces RSS you can probably bypass &#8220;RSS limits&#8221; of Instapaper non-subscription accounts. But I encourage you to support this service. Cheating is not good at all, please respect <a href="http://www.marco.org/">Marco Arment&#8217;s</a> work and efforts he put in this awesome service.</p></blockquote>

<p>Having the command line utility that produces locally stored RSS feeds the only thing that remains is to create simple Calibre Recipe for <em>ebook-convert</em> utility. The recipe should be parameterized with path to RSS feed generated by <em>InstaFeed</em>. Here is the code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">LocalRssFeed</span><span class="p">(</span><span class="n">BasicNewsRecipe</span><span class="p">):</span>
</span><span class='line'>  <span class="n">title</span>        <span class="o">=</span> <span class="s">u&#39;local_rss_feed&#39;</span>
</span><span class='line'>  <span class="n">oldest_article</span>    <span class="o">=</span> <span class="mi">365</span>
</span><span class='line'>  <span class="n">max_articles_per_feed</span>    <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'>  <span class="n">auto_cleanup</span>    <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>  <span class="n">feeds</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_feeds</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="c"># little hack that allows passing path to local RSS feed as a parameter via command line</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">feeds</span> <span class="o">=</span> <span class="p">[</span><span class="s">u&#39;Instapaper Unread&#39;</span><span class="p">,</span> <span class="s">&#39;file:///&#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="p">]</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">feeds</span>
</span></code></pre></td></tr></table></div></figure>


<p>All custom recipes should be stored within <em><Calibre Installation Directory>Calibre Settings\custom_recipes</em> folder.</p>

<blockquote><p>Note: Everything in this post applies to Portable 0.8.65.0 version of Calibre for Microsoft Windows. I have no idea whether it will work for other versions or installation variants.</p></blockquote>

<p>Below is sources for batch file that produces RSS feed from Read Later Instapaper directory and then generates e-book in EPUB format at <em>C:\Temp. </em>I run this batch weekly via Windows Task Scheduler.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">setlocal</span> EnableDelayedExpansion
</span><span class='line'><span class="k">setlocal</span> EnableExtensions
</span><span class='line'>
</span><span class='line'><span class="c">:: change path to your calibre and instafeed executables</span>
</span><span class='line'><span class="k">set</span> <span class="nv">_instafeeddir</span><span class="o">=</span>F:\util\instafeed\
</span><span class='line'><span class="k">set</span> <span class="nv">_calibredir</span><span class="o">=</span>F:\util\Calibre Portable\
</span><span class='line'>
</span><span class='line'><span class="c">:: set output directory and naming convention here</span>
</span><span class='line'><span class="k">set</span> <span class="nv">filename</span><span class="o">=</span>C:\Temp\[<span class="nv">%date:</span><span class="n">/=%]_instapaper_unread_articles</span>
</span><span class='line'><span class="k">set</span> <span class="nv">rssfile</span><span class="o">=</span><span class="nv">%filename%</span>.xml
</span><span class='line'><span class="k">set</span> <span class="nv">ebookfile</span><span class="o">=</span><span class="nv">%filename%</span>.epub
</span><span class='line'>
</span><span class='line'><span class="nv">%_instafeeddir%</span>instafeed.exe -c rss -u <span class="p">&lt;</span><span class="n">instapaper_username</span>&gt; -p <span class="p">&lt;</span><span class="n">instapaper</span> password&gt; -d <span class="s2">&quot;Read Later&quot;</span> -o <span class="s2">&quot;%rssfile%&quot;</span>
</span><span class='line'><span class="nv">%_calibredir%</span>\Calibre\ebook-convert.exe <span class="s2">&quot;%_calibredir%\Calibre Settings\custom_recipes\local_rss_feed.recipe&quot;</span> <span class="s2">&quot;%ebookfile%&quot;</span> --username<span class="o">=</span><span class="s2">&quot;%rssfile%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">endlocal</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had fun writing <a href="https://github.com/manekovskiy/InstaFeed">InstaFeed</a> and digging in Calibre recipes and hope that someone will benefit from my experience. What else could be said? Read with convenience and have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Client-Side Validation Support for PhoneAttribute or Fighting the Lookbehind in JavaScript]]></title>
    <link href="http://amanek.com/adding-client-side-validation-support-for-phoneattribute-or-fighting-the-look-behind-in-javascript/"/>
    <updated>2012-09-20T12:22:55-07:00</updated>
    <id>http://amanek.com/adding-client-side-validation-support-for-phoneattribute-or-fighting-the-look-behind-in-javascript</id>
    <content type="html"><![CDATA[<p>Today, I was working on JavaScript implementation of validation routine for <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.phoneattribute.aspx">PhoneAttribute</a> in context of my hobby project <a href="http://amanek.com/building-data-annotations-validator-control-with-client-side-validation/">DAValidation</a>. Examining the sources of .NET 4.5 showed that the validation is done via regular expression:</p>

<p><img class="center" src="http://amanek.com/images/posts/phone-validation-regexp-with-non-supported-lookbehind-highlighted.png" title="Unsupported lookbehind part of phone validation regexp pattern" alt="Unsupported lookbehind part of phone validation regexp pattern"></p>

<p>And here is the problem - the pattern uses lookbehind feature <a href="http://www.regular-expressions.info/lookaround.html">that is not supported in JavaScript</a>.
Quote from <a href="http://www.regular-expressions.info">regular-expressions.info:</a></p>

<blockquote><p>Finally, flavors like <a href="http://www.regular-expressions.info/javascript.html">JavaScript</a>, <a href="http://www.regular-expressions.info/ruby.html">Ruby</a> and <a href="http://www.regular-expressions.info/tcl.html">Tcl</a> do not support lookbehind at all, even though they do support lookahead.</p></blockquote>

<p>This lookbehind is used to match the &#8220;+&#8221; sign at the beginning of string, i. e. check the existence of the prefix. To make this work in JavaScript pattern should be reversed and lookbehind assertion should be replaced with lookahead (replace prefix check to suffix). And that&#8217;s it! The resulting pattern is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">^</span><span class="p">(</span><span class="err">\</span><span class="nx">d</span><span class="o">+</span><span class="err">\</span><span class="nx">s</span><span class="o">?</span><span class="p">(</span><span class="nx">x</span><span class="o">|</span><span class="err">\</span><span class="p">.</span><span class="nx">txe</span><span class="o">?</span><span class="p">)</span><span class="err">\</span><span class="nx">s</span><span class="o">?</span><span class="p">)</span><span class="o">?</span><span class="p">((</span><span class="err">\</span><span class="p">)(</span><span class="err">\</span><span class="nx">d</span><span class="o">+</span><span class="p">[</span><span class="err">\</span><span class="nx">s</span><span class="err">\</span><span class="o">-</span><span class="err">\</span><span class="p">.]</span><span class="o">?</span><span class="p">)</span><span class="o">?</span><span class="err">\</span><span class="nx">d</span><span class="o">+</span><span class="err">\</span><span class="p">(</span><span class="o">|</span><span class="err">\</span><span class="nx">d</span><span class="o">+</span><span class="p">)[</span><span class="err">\</span><span class="nx">s</span><span class="err">\</span><span class="o">-</span><span class="err">\</span><span class="p">.]</span><span class="o">?</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="err">\</span><span class="p">)([</span><span class="err">\</span><span class="nx">s</span><span class="err">\</span><span class="o">-</span><span class="err">\</span><span class="p">.]</span><span class="o">?</span><span class="err">\</span><span class="nx">d</span><span class="o">+</span><span class="p">)</span><span class="o">?</span><span class="err">\</span><span class="nx">d</span><span class="o">+</span><span class="err">\</span><span class="o">+?</span><span class="err">\</span><span class="p">((</span><span class="o">?!</span><span class="err">\</span><span class="o">+</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="o">|</span><span class="err">\</span><span class="nx">d</span><span class="o">+</span><span class="p">)(</span><span class="err">\</span><span class="nx">s</span><span class="o">?</span><span class="err">\</span><span class="o">+</span><span class="p">)</span><span class="o">?</span><span class="nx">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a proof here is test html page:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Phone Number RegExp Test Page<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="kd">function</span> <span class="nx">validateInput</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">phoneRegex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;^(\\d+\\s?(x|\\.txe?)\\s?)?((\\)(\\d+[\\s\\-\\.]?)?\\d+\\(|\\d+)[\\s\\-\\.]?)*(\\)([\\s\\-\\.]?\\d+)?\\d+\\+?\\((?!\\+.*)|\\d+)(\\s?\\+)?$&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;tbPhone&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">alert</span><span class="p">(</span><span class="nx">phoneRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">value</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;tbPhone&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">&quot;javascript:testPhone()&quot;</span><span class="nt">&gt;</span>Validate<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While working on pattern reversing I was using my favorite regular expressions building and testing tool <a href="http://www.ultrapico.com/Expresso.htm">Expresso</a>. Also, a great article of Steven Levithan <a href="http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript">Mimicking Lookbehind in JavaScript</a> helped to look deeper and actually find the right solution of the problem.</p>

<p>PS. Now, as I finally finished adding <a href="http://davalidation.codeplex.com/workitem/701">support for new .NET 4.5 validation attributes</a> the new version of <a href="http://davalidation.codeplex.com/">DAValidation</a> will be published soon. Stay tuned ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Implement Configurable Dynamic Data Filters in ASP.NET 4.5]]></title>
    <link href="http://amanek.com/how-to-implement-configurable-dynamic-data-filters-in-asp-net-4-5/"/>
    <updated>2012-05-01T10:12:00-07:00</updated>
    <id>http://amanek.com/how-to-implement-configurable-dynamic-data-filters-in-asp-net-4-5</id>
    <content type="html"><![CDATA[<p>Every time, when we speaking about data driven web applications there is a task of providing data filtering feature or configurable filters with ability to save the search criteria individually for each user. The most convenient filtering experience I have ever encountered were the bug tracking systems. Fast and simple. To get the idea of what I&#8217;m talking about just look at <a href="http://www.redmine.org/projects/redmine/issues">Redmine Issues page</a>.
Can we implement something similar with pure ASP.NET, particularly with <a href="http://msdn.microsoft.com/en-us/library/ee845452.aspx"><em>ASP.NET Dynamic Data</em></a>? Why Dynamic Data? Because of its focus on metadata which is set by attributes from <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.aspx">DataAnnotations namespace</a> and convention over configuration approach for building data driven applications. Its simple and convenient, and does not take much efforts to extend it.</p>

<p>For filtering Dynamic Data offers us <a href="http://msdn.microsoft.com/en-us/library/ee377606.aspx#filter_templates"><em>Filter Templates</em></a> with <a href="http://msdn.microsoft.com/en-us/library/system.web.dynamicdata.filterrepeater.aspx"><em>FilterRepeater</em></a> control. To get the idea of how Dynamic Data Filter Templates are working I highly recommend reading a great post of <a href="http://www.olegsych.com/">Oleg Sych</a> <a href="http://www.olegsych.com/2010/07/understanding-aspnet-dynamic-data-filter-templates/">&#8220;Understanding ASP.NET Dynamic Data: Filter Templates&#8221;</a>.</p>

<p>Until .NET 4.5 there were no extension points where we could retake control over filter templates creation. And surprisingly, I found that interface <a href="http://msdn.microsoft.com/en-us/library/system.web.dynamicdata.ifilterexpressionprovider(v=vs.110"><em>IFilterExpressionProvider</em></a>.aspx) became public in .NET 4.5. So now we can extend Dynamic Data filtering mechanism.</p>

<h2>ASP.NET Dynamic Data QueryableFilterRepeater</h2>

<p>For the jump start lets remind how List PageTemplate in Dynamic Data looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='aspx-cs'><span class='line'><span class="nt">&lt;asp:QueryableFilterRepeater</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">ID=</span><span class="s">&quot;FilterRepeater&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ItemTemplate&gt;</span>
</span><span class='line'>      <span class="nt">&lt;asp:Label</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">Text=</span><span class="s">&#39;</span><span class="nt">&lt;%#</span> <span class="n">Eval</span><span class="p">(</span><span class="s">&quot;DisplayName&quot;</span><span class="p">)</span> <span class="nt">%&gt;</span>&#39; OnPreRender=&quot;Label_PreRender&quot; /&gt;
</span><span class='line'>      <span class="nt">&lt;asp:DynamicFilter</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">ID=</span><span class="s">&quot;DynamicFilter&quot;</span> <span class="na">OnFilterChanged=</span><span class="s">&quot;DynamicFilter_FilterChanged&quot;</span> <span class="nt">/&gt;&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ItemTemplate&gt;</span>
</span><span class='line'><span class="nt">&lt;/asp:QueryableFilterRepeater&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;asp:GridView</span> <span class="na">ID=</span><span class="s">&quot;GridView1&quot;</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">DataSourceID=</span><span class="s">&quot;GridDataSource&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;%</span><span class="p">--</span> <span class="n">Contents</span> <span class="n">and</span> <span class="n">styling</span> <span class="n">omited</span> <span class="k">for</span> <span class="n">brevity</span> <span class="p">--</span><span class="nt">%&gt;</span>
</span><span class='line'><span class="nt">&lt;/asp:GridView&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;asp:EntityDataSource</span> <span class="na">ID=</span><span class="s">&quot;GridDataSource&quot;</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">EnableDelete=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;asp:QueryExtender</span> <span class="na">TargetControlID=</span><span class="s">&quot;GridDataSource&quot;</span> <span class="na">ID=</span><span class="s">&quot;GridQueryExtender&quot;</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;asp:DynamicFilterExpression</span> <span class="na">ControlID=</span><span class="s">&quot;FilterRepeater&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/asp:QueryExtender&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The purpose of <a href="http://msdn.microsoft.com/en-us/library/system.web.dynamicdata.queryablefilterrepeater.aspx"><em>QueryableFilterRepeater</em></a> is to generate set of filters for a set of columns. It should contain <a href="http://msdn.microsoft.com/en-us/library/system.web.dynamicdata.dynamicfilter.aspx"><em>DynamicFilter</em></a> control which is the actual placeholder for a <em>FilterTemplate</em> control. <em>QueryableFilterRepeater</em> implements <em>IFilterExpressionProvider</em> interface that is supported by <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.queryextender.aspx"><em>QueryExtender</em></a> via <a href="http://msdn.microsoft.com/en-us/library/system.web.dynamicdata.dynamicfilterexpression.aspx"><em>DynamicFilterExpression</em></a> control.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IFilterExpressionProvider</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">IQueryable</span> <span class="nf">GetQueryable</span><span class="p">(</span><span class="n">IQueryable</span> <span class="n">source</span><span class="p">);</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">IQueryableDataSource</span> <span class="n">dataSource</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete call sequence is represented on diagram below.</p>

<p><img class="center" src="http://amanek.com/images/posts/dynamic-data-queryextender-interactions.png" title="Sequence diagram showing QueryExtender interaction with Dynamic Data controls" alt="Sequence diagram showing QueryExtender interaction with Dynamic Data controls"></p>

<h2>Building Configurable Alternative to QueryableFilterRepeater</h2>

<p>As <em>QueryableFilterRepeater</em> is creating filters automatically, the only thing we can do is to hide <em>DynamicFilter</em> on client- or on server-side. To my mind it is not good idea, so a custom implementation of <em>IFilterExpressionProvider</em> is needed. It should support the same item template model as in <em>QueryableFilterRepeater</em> but with ability to add/remove filter controls between postbacks.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[ParseChildren(true)]</span>
</span><span class='line'><span class="na">[PersistChildren(false)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DynamicFilterRepeater</span> <span class="p">:</span> <span class="n">Control</span><span class="p">,</span> <span class="n">IFilterExpressionProvider</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IFilterExpressionProvider</span><span class="p">&gt;</span> <span class="n">filters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IFilterExpressionProvider</span><span class="p">&gt;();</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">IQueryableDataSource</span> <span class="n">dataSource</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">IQueryable</span> <span class="n">IFilterExpressionProvider</span><span class="p">.</span><span class="n">GetQueryable</span><span class="p">(</span><span class="n">IQueryable</span> <span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">filters</span><span class="p">.</span><span class="n">Aggregate</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">filter</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">filter</span><span class="p">.</span><span class="n">GetQueryable</span><span class="p">(</span><span class="n">current</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">void</span> <span class="n">IFilterExpressionProvider</span><span class="p">.</span><span class="n">Initialize</span><span class="p">(</span><span class="n">IQueryableDataSource</span> <span class="n">queryableDataSource</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Contract</span><span class="p">.</span><span class="n">Assert</span><span class="p">(</span><span class="n">queryableDataSource</span> <span class="k">is</span> <span class="n">IDynamicDataSource</span><span class="p">);</span>
</span><span class='line'>      <span class="n">Contract</span><span class="p">.</span><span class="n">Assert</span><span class="p">(</span><span class="n">queryableDataSource</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">ItemTemplate</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="n">dataSource</span> <span class="p">=</span> <span class="n">queryableDataSource</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Page</span><span class="p">.</span><span class="n">InitComplete</span> <span class="p">+=</span> <span class="n">InitComplete</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Page</span><span class="p">.</span><span class="n">LoadComplete</span> <span class="p">+=</span> <span class="n">LoadCompeted</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only disappointing thing is the content generation of <em>DynamicFilter</em> which is done on <em>Page.InitComplete</em> event.</p>

<blockquote><p>Oleg Sych tried to change the situation, but <a href="https://connect.microsoft.com/VisualStudio/feedback/details/588383/dont-use-page-initcomplete-in-queryablefilterrepeater-and-dynamicfilter-controls">his suggestion</a> is closed now and seems nothing will be changed. I just reposted his suggestion on <a href="http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2763785-don-t-use-page-initcomplete-in-queryablefilterrepe">visualstudio.uservoice.com</a> in hope that this time, we will succeed.</p></blockquote>

<p>To make things working, <em>DynamicFilter</em> control should initialize itself via <em>EnsureInit</em> method which is generally speaking responsible for <em>FitlerTempate</em> lookup and loading. In other words to force the <em>DynamicFilter</em> to generate its content this method should be called. The only way to do it is to use reflection, since <em>EnsureInit</em> is private.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">MethodInfo</span> <span class="n">DynamicFilterEnsureInit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="nf">DynamicFilterRepeater</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">DynamicFilterEnsureInit</span> <span class="p">=</span> <span class="k">typeof</span> <span class="p">(</span><span class="n">DynamicFilter</span><span class="p">).</span><span class="n">GetMethod</span><span class="p">(</span><span class="s">&quot;EnsureInit&quot;</span><span class="p">,</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">AddFilterControls</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">columnNames</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="n">MetaColumn</span> <span class="n">column</span> <span class="k">in</span> <span class="n">GetFilteredMetaColumns</span><span class="p">(</span><span class="n">columnNames</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">DynamicFilterRepeaterItem</span> <span class="n">item</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DynamicFilterRepeaterItem</span> <span class="p">{</span> <span class="n">DataItemIndex</span> <span class="p">=</span> <span class="n">itemIndex</span><span class="p">,</span> <span class="n">DisplayIndex</span> <span class="p">=</span> <span class="n">itemIndex</span> <span class="p">};</span>
</span><span class='line'>      <span class="n">itemIndex</span><span class="p">++;</span>
</span><span class='line'>      <span class="n">ItemTemplate</span><span class="p">.</span><span class="n">InstantiateIn</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>      <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">DynamicFilter</span> <span class="n">filter</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">FindControl</span><span class="p">(</span><span class="n">DynamicFilterContainerId</span><span class="p">)</span> <span class="k">as</span> <span class="n">DynamicFilter</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">filter</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">CultureInfo</span><span class="p">.</span><span class="n">CurrentCulture</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;FilterRepeater &#39;{0}&#39; does not contain a control of type &#39;{1}&#39; with ID &#39;{2}&#39; in its item templates&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">ID</span><span class="p">,</span>
</span><span class='line'>              <span class="k">typeof</span><span class="p">(</span><span class="n">QueryableFilterUserControl</span><span class="p">).</span><span class="n">FullName</span><span class="p">,</span>
</span><span class='line'>              <span class="n">DynamicFilterContainerId</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">filter</span><span class="p">.</span><span class="n">DataField</span> <span class="p">=</span> <span class="n">column</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">item</span><span class="p">.</span><span class="n">DataItem</span> <span class="p">=</span> <span class="n">column</span><span class="p">;</span>
</span><span class='line'>      <span class="n">item</span><span class="p">.</span><span class="n">DataBind</span><span class="p">();</span>
</span><span class='line'>      <span class="n">item</span><span class="p">.</span><span class="n">DataItem</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">filters</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">filter</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">filters</span><span class="p">.</span><span class="n">ForEach</span><span class="p">(</span><span class="n">f</span> <span class="p">=&gt;</span> <span class="n">DynamicFilterEnsureInit</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="k">new</span> <span class="kt">object</span><span class="p">[]</span> <span class="p">{</span> <span class="n">dataSource</span> <span class="p">}));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">IEnumerable</span> <span class="nf">GetFilteredMetaColumns</span><span class="p">(</span><span class="n">IEnumerable</span> <span class="n">filterColumns</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">MetaTable</span><span class="p">.</span><span class="n">GetFilteredColumns</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">column</span> <span class="p">=&gt;</span> <span class="n">filterColumns</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">column</span><span class="p">.</span><span class="n">Name</span><span class="p">))</span>
</span><span class='line'>      <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">column</span> <span class="p">=&gt;</span> <span class="n">column</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">class</span> <span class="nc">DynamicFilterRepeaterItem</span> <span class="p">:</span> <span class="n">Control</span><span class="p">,</span> <span class="n">IDataItemContainer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">object</span> <span class="n">DataItem</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">internal</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="n">DataItemIndex</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">internal</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="n">DisplayIndex</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">internal</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another problem that should be solved - filter controls instantiation. As it was pointed before, all things in Dynamic Data that are connected with filtering are initialized at <em>Page.InitCompleted</em> event. And if you want your dynamic filters to work, they should be instantiated before or at <em>InitComplete</em> event. So far I see only one way to solve this - method <em>AddFilterControls</em> should be called twice, first time to instantiate filter controls that were present on the page (<em>InitComplete</em> event) and second time for newly added columns that are to be filtered (<em>LoadComplete</em> event).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">InitComplete</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">initComleted</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">addedOnInitCompleteFilters</span><span class="p">.</span><span class="n">AddRange</span><span class="p">(</span><span class="n">FilterColumns</span><span class="p">);</span>
</span><span class='line'>  <span class="n">AddFilterControls</span><span class="p">(</span><span class="n">addedOnInitCompleteFilters</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">initComleted</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">LoadCompeted</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">eventArgs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">loadCompleted</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">AddFilterControls</span><span class="p">(</span><span class="n">FilterColumns</span><span class="p">.</span><span class="n">Except</span><span class="p">(</span><span class="n">addedOnInitCompleteFilters</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">loadCompleted</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Encapsulating DynamicFilterRepeater</h2>

<p><em>DynamicFilterRepeater</em> is only a part of more general component though. Everything it does is rendering of filter controls and providing of filter expression. But to start working, <em>DynamicFilterRepeater</em> needs two things - <em>IQueryableDataSource </em>and list of columns to be filtered. Since filtering across the website should be consistent and unified it would be good to encapsulate <em>DynamicFilterRepeater</em> in <em>UserControl</em> which will serve as HTML layout and a glue between page (with <em>IQueryableDataSource</em>, <em>QueryExtender</em> and data source bound control) and <em>DynamicFilterRepeater</em>. In my example I chose <em>GridView</em>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='aspx-cs'><span class='line'><span class="nt">&lt;asp:Label</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">Text=</span><span class="s">&quot;Add fitler&quot;</span> <span class="na">AssociatedControlID=</span><span class="s">&quot;ddlFilterableColumns&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;asp:DropDownList</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">ID=</span><span class="s">&quot;ddlFilterableColumns&quot;</span> <span class="na">CssClass=</span><span class="s">&quot;ui-widget&quot;</span>
</span><span class='line'>  <span class="na">AutoPostBack=</span><span class="s">&quot;True&quot;</span>
</span><span class='line'>  <span class="na">ItemType=</span><span class="s">&quot;</span><span class="nt">&lt;%</span><span class="err">$</span> <span class="n">Code</span><span class="p">:</span> <span class="k">typeof</span><span class="p">(</span><span class="n">KeyValuePair</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;)</span> <span class="nt">%&gt;</span>&quot;
</span><span class='line'>  DataValueField=&quot;Key&quot;
</span><span class='line'>  DataTextField=&quot;Value&quot;
</span><span class='line'>  SelectMethod=&quot;GetFilterableColumns&quot;
</span><span class='line'>  OnSelectedIndexChanged=&quot;ddlFilterableColumns_SelectedIndexChanged&quot;&gt;
</span><span class='line'><span class="nt">&lt;/asp:DropDownList&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">ID=</span><span class="s">&quot;FilterColumns&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;dd:DynamicFilterRepeater</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">ID=</span><span class="s">&quot;FilterRepeater&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ItemTemplate&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;asp:Label</span> <span class="na">ID=</span><span class="s">&quot;lblDisplayName&quot;</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span>
</span><span class='line'>              <span class="na">Text=</span><span class="s">&#39;</span><span class="nt">&lt;%#</span> <span class="n">Eval</span><span class="p">(</span><span class="s">&quot;DisplayName&quot;</span><span class="p">)</span> <span class="nt">%&gt;</span>&#39;
</span><span class='line'>              OnPreRender=&quot;lblDisplayName_PreRender&quot; /&gt;
</span><span class='line'>          <span class="nt">&lt;asp:DynamicFilter</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span> <span class="na">ID=</span><span class="s">&quot;DynamicFilter&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ItemTemplate&gt;</span>
</span><span class='line'><span class="nt">&lt;/dd:DynamicFilterRepeater&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember I have mentioned about two-stage filter controls instantiation and a storage for list of filtered columns? Yes, this user control is a place where list of filtered columns could be stored. To get list of filtered columns before <em>Page.InitComplete</em> event I&#8217;m using a little trick - the hidden input field serves as a storage for filtered columns list. Enforcing hidden input to have its ID generated on server makes it possible to retrieve value directly from <em>Page.Form</em> collection at any stage of page lifecycle.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">DynamicFilterForm</span> <span class="p">:</span> <span class="n">UserControl</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">DynamicFilterRepeater</span> <span class="n">FilterRepeater</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">Type</span> <span class="n">FitlerType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na"> [IDReferenceProperty(typeof(GridView))]</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">GridViewID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na"> [IDReferenceProperty(typeof(QueryExtender))]</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">QueryExtenderID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="n">MetaTable</span> <span class="n">MetaTable</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">GridView</span> <span class="n">GridView</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">protected</span> <span class="n">QueryExtender</span> <span class="n">GridQueryExtender</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnInit</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">base</span><span class="p">.</span><span class="n">OnInit</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>      <span class="n">MetaTable</span> <span class="p">=</span> <span class="n">MetaTable</span><span class="p">.</span><span class="n">CreateTable</span><span class="p">(</span><span class="n">FitlerType</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">GridQueryExtender</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">FindChildControl</span><span class="p">&lt;</span><span class="n">QueryExtender</span><span class="p">&gt;(</span><span class="n">QueryExtenderID</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GridView</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">FindChildControl</span><span class="p">&lt;</span><span class="n">GridView</span><span class="p">&gt;(</span><span class="n">GridViewID</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GridView</span><span class="p">.</span><span class="n">SetMetaTable</span><span class="p">(</span><span class="n">MetaTable</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Tricky thing to retrieve list of filter columns directly from hidden field</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">Request</span><span class="p">.</span><span class="n">Form</span><span class="p">[</span><span class="n">FilterColumns</span><span class="p">.</span><span class="n">UniqueID</span><span class="p">]))</span>
</span><span class='line'>          <span class="n">FilterRepeater</span><span class="p">.</span><span class="n">FilterColumns</span><span class="p">.</span><span class="n">AddRange</span><span class="p">(</span><span class="n">Request</span><span class="p">.</span><span class="n">Form</span><span class="p">[</span><span class="n">FilterColumns</span><span class="p">.</span><span class="n">UniqueID</span><span class="p">].</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;,&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">((</span><span class="n">IFilterExpressionProvider</span><span class="p">)</span><span class="n">FilterRepeater</span><span class="p">).</span><span class="n">Initialize</span><span class="p">(</span><span class="n">GridQueryExtender</span><span class="p">.</span><span class="n">DataSource</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnPreRender</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">FilterColumns</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">,</span> <span class="n">FilterRepeater</span><span class="p">.</span><span class="n">FilterColumns</span><span class="p">);</span>
</span><span class='line'>      <span class="k">base</span><span class="p">.</span><span class="n">OnPreRender</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// event handlers ommited</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusions</h2>

<p>While this solution works, I&#8217;m a bit concerned about it. Existent infrastructure was in my way all the time I experimented with <em>IFilterExpressionProvider</em>, and I had to look deep inside the mechanisms of Dynamic Data to understand and find ways to come round its restrictions. And this leads me to only one conclusion - Dynamic Data was not designed to provide configurable filtering. So my answer on question about possibility of configurable filtering experience implementation with Dynamic Data is <em>yes</em>, but be careful what you wish for, since it was not designed for such kind of scenarios.</p>

<p>Here I did not mentioned how to save filters, but it is pretty simple, and all we need is to save somewhere associative array of &#8220;column-value&#8221; for a specific page. Complete source code is available on <a href="https://github.com/manekovskiy/Configurable-Dynamic-Data-Filters">GitHub</a> and you will need Visual Studio 11 Beta with localdb setup to run sample project.</p>

<p>I would gladly accept criticism, ideas or just thoughts on this particular scenario. Share, do coding and have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Types Were Added, Moved or Became Public in .NET 4.5 Beta]]></title>
    <link href="http://amanek.com/what-types-were-added-moved-or-became-public-in-net-4-5-beta/"/>
    <updated>2012-04-20T17:00:06-07:00</updated>
    <id>http://amanek.com/what-types-were-added-moved-or-became-public-in-net-4-5-beta</id>
    <content type="html"><![CDATA[<p>There is a <a href="http://www.asp.net/vnext/overview/whitepapers/whats-new">whitepaper</a> about new features of ASP.NET 4.5, dozens of blog posts, videos from conferences, some tutorials and <a href="http://msdn.microsoft.com/en-us/library/ms171868(v=vs.110">MSDN</a>.aspx) topic describing overall changes. But why there are no reports about what types were actually added in .NET 4.5 Beta? Where are lists of &#8220;new types added to assembly N&#8221; or &#8220;types that became public in assembly N&#8221;? I understand that these lists are not very interesting and that it is more convenient to read descriptions of the new features. Nobody cares about details until they start working against you. And this is normal, right and ok, but now I have some free time and I want to share info about new types that were added or became public in .NET 4.5 comparing to .NET 4.0.</p>

<p>Why I became so interested in this? Well, I accidentally found that <a href="http://msdn.microsoft.com/en-us/library/system.web.dynamicdata.ifilterexpressionprovider(v=vs.110"><em>System.Web.DynamicData.IFilterExpressionProvider</em></a>.aspx) interface became public. Briefly, this allows to work with <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.queryextender.aspx"><em>QueryExtender</em></a> and finally (I really wanted this since .NET 3.5) support its <a href="http://msdn.microsoft.com/en-us/library/system.web.dynamicdata.dynamicfilterexpression.aspx"><em>DynamicFilterExpression</em></a>. <del>Maybe on next weekend I&#8217;ll post</del> I&#8217;ve already posted about <a href="http://amanek.com/?p=100">my experiments with IFilterExpressionProvider</a>, take a look if you are interested, and now lets return to the main topic.</p>

<p>It is pretty simple to do compiled assemblies diff if you have <a href="http://www.ndepend.com/">NDepend</a> or similar tool, but what if you (like me) have no license? I started thinking to enumerate public types via reflection, but soon recalled that <a href="http://www.west-wind.com/weblog/posts/2012/Mar/13/NET-45-is-an-inplace-replacement-for-NET-40">.NET 4.5 beta replaces assemblies of .NET 4.0</a> during installation and Assembly.LoadFrom will not work. To overcome this I decided to parse and compare XML documentation that comes along with all .NET assemblies. Simple as that, every public type is documented and difference between old and new version of documentation will give me at least names of types.</p>

<p>Ok, where to get xml documentation files for .NET 4.0? Binaries with xml docs of .NET 4.0 and 4.5 are located in <em><SysDrive>:\Program Files[(x86)]\Reference Assemblies\Microsoft\Framework.NETFramework</em>.</p>

<p><img class="center" src="http://amanek.com/images/posts/reference-assemblies-folder.png" title="Reference assemblies folder location" alt="Reference assemblies folder location"></p>

<p>What I wanted is to get some statistics. There are 969 new public types in .NET 4.5. But it does not mean that those are completely new things, because it is not, it means that out of the box .NET 4.5 Beta has +969 new types comparing to .NET 4.0 and now there are totally 14971 public and documented types in .NET 4.5. Almost 15K only public types - that&#8217;s incredibly huge number.</p>

<p><img class="center" src="http://amanek.com/images/posts/comparison-of-types-count-between-net40-and-net45.png" title="Round Diagram showing types count of .NET 4.0 and .NET 4.5 Beta" alt="Round Diagram showing types count of .NET 4.0 and .NET 4.5 Beta"></p>

<p>Most of new types are located in <em>System.IdentityModel</em>, <em>System.Web</em> and <em>System.Windows.Controls.Ribbon</em> assemblies. Taking into account that <em>System.IdentityModel</em> is providing authentication and authorization features and <em>System.Windows.Controls.Ribbon</em> is UI library allowing use of Microsoft Ribbon for WPF, we can make a conclusion that vast amount of new changes is connected with web.</p>

<p><img class="center" src="http://amanek.com/images/posts/new-types-count-by-assembly.png" title="Histogram of new types count by asembly" alt="Histogram of new types count by asembly"></p>

<p>But the most interesting thing was to examine minor changes and see that something new and really useful has been added. And I encourage you to look over list of new classes and I bet you will find something interesting.</p>

<p>LINQPad script with which I did the documentation comparison is listed below. Excel report with some diagrams is also available <a href="https://docs.google.com/open?id=0B4z0as-FFbTdaUVlOXZBblctRDQ">online</a>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// in case of non 64 bit system change &quot;Program Files (x86)&quot; to &quot;Program Files&quot;</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">net40Dir</span> <span class="p">=</span> <span class="s">@&quot;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">net45Dir</span> <span class="p">=</span> <span class="s">@&quot;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1. Get all types from all xml doc files in both directories that are containing .NET assemblies and group them by assemblies</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">net40Grouped</span> <span class="p">=</span> <span class="n">GetPublicTypesByAssembly</span><span class="p">(</span><span class="n">net40Dir</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">net45Grouped</span> <span class="p">=</span> <span class="n">GetPublicTypesByAssembly</span><span class="p">(</span><span class="n">net45Dir</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. Get list of newly added assemblies</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">newAssemblies</span> <span class="p">=</span> <span class="n">net45Grouped</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">kvp</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">net40Grouped</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">kvp</span><span class="p">.</span><span class="n">Key</span><span class="p">)).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;New assemblies in .NET 4.5 Beta: (total count - {0})&quot;</span><span class="p">,</span> <span class="n">newAssemblies</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</span><span class='line'>  <span class="n">newAssemblies</span><span class="p">.</span><span class="n">ForEach</span><span class="p">(</span><span class="n">kvp</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">kvp</span><span class="p">.</span><span class="n">Key</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3. Get all assemblies that are not present in .NET 4.5 beta</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">nonExistentAssemblies</span> <span class="p">=</span> <span class="n">net40Grouped</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">kvp</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">net45Grouped</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">kvp</span><span class="p">.</span><span class="n">Key</span><span class="p">)).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Assemblies that are not present in .NET 4.5 Beta folder comparing to .NET 4.0: (total count - {0})&quot;</span><span class="p">,</span> <span class="n">nonExistentAssemblies</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</span><span class='line'>  <span class="n">nonExistentAssemblies</span><span class="p">.</span><span class="n">ForEach</span><span class="p">(</span><span class="n">kvp</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">kvp</span><span class="p">.</span><span class="n">Key</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4. Get all new types in .NET 4.0 and .NET 4.5 Beta assemblies</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">net40</span> <span class="p">=</span> <span class="n">net40Grouped</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">kvp</span> <span class="p">=&gt;</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">net45</span> <span class="p">=</span> <span class="n">net45Grouped</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">kvp</span> <span class="p">=&gt;</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">var</span> <span class="n">newTypes</span> <span class="p">=</span> <span class="n">net45</span><span class="p">.</span><span class="n">Except</span><span class="p">(</span><span class="n">net40</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Types count in .NET 4.0:|{0}&quot;</span><span class="p">,</span> <span class="n">net40</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Types count in .NET 4.5 Beta:|{0}&quot;</span><span class="p">,</span> <span class="n">net45</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;New types count in .NET 4.5 Beta comparing to .NET 4.0:|{0}&quot;</span><span class="p">,</span> <span class="n">newTypes</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 5. Get assemblies that are containing new types</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">assembliesWithChanges</span> <span class="p">=</span> <span class="n">net45Grouped</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">kvp</span> <span class="p">=&gt;</span> <span class="n">newTypes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">type</span> <span class="p">=&gt;</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">ContainsValue</span><span class="p">(</span><span class="n">type</span><span class="p">.</span><span class="n">Value</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 6. Remove existent in .NET 4.0 types from assembliesWithChanges to get clear lists of new types grouped by assemblies</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">newTypesGrouped</span> <span class="p">=</span> <span class="n">assembliesWithChanges</span>
</span><span class='line'>      <span class="p">.</span><span class="n">ToDictionary</span><span class="p">(</span><span class="n">typesGroup</span> <span class="p">=&gt;</span> <span class="n">typesGroup</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">typesGroup</span> <span class="p">=&gt;</span> <span class="n">typesGroup</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">Except</span><span class="p">(</span><span class="n">net40</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">kvp</span> <span class="p">=&gt;</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">).</span><span class="n">ToList</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;New types by assembly:&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">assemblyWithNewTypes</span> <span class="k">in</span> <span class="n">newTypesGrouped</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}|{1}&quot;</span><span class="p">,</span> <span class="n">assemblyWithNewTypes</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">assemblyWithNewTypes</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">typeName</span> <span class="k">in</span> <span class="n">assemblyWithNewTypes</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">typeName</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;</span> <span class="n">GetPublicTypesByAssembly</span><span class="p">(</span><span class="kt">string</span> <span class="n">xmlDocsDirectory</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span><span class="p">[]</span> <span class="n">xmlDocFiles</span> <span class="p">=</span> <span class="n">Directory</span><span class="p">.</span><span class="n">GetFiles</span><span class="p">(</span><span class="n">xmlDocsDirectory</span><span class="p">,</span> <span class="s">&quot;*.xml&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">xmlDoc</span> <span class="k">in</span> <span class="n">xmlDocFiles</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">root</span> <span class="p">=</span> <span class="n">XDocument</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">xmlDoc</span><span class="p">).</span><span class="n">Root</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">var</span> <span class="n">members</span> <span class="p">=</span> <span class="n">root</span><span class="p">.</span><span class="n">Element</span><span class="p">(</span><span class="s">&quot;members&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">members</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">var</span> <span class="n">typesByAssembly</span> <span class="p">=</span> <span class="n">members</span><span class="p">.</span><span class="n">Elements</span><span class="p">(</span><span class="s">&quot;member&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Attribute</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">).</span><span class="n">Value</span><span class="p">.</span><span class="n">StartsWith</span><span class="p">(</span><span class="s">&quot;T:&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="p">.</span><span class="n">ToDictionary</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Attribute</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">).</span><span class="n">Value</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">(),</span> <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Attribute</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">).</span><span class="n">Value</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">2</span><span class="p">)</span> <span class="cm">/* T: */</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">GetFileNameWithoutExtension</span><span class="p">(</span><span class="n">xmlDoc</span><span class="p">)</span> <span class="p">+</span> <span class="s">&quot;.dll&quot;</span><span class="p">,</span> <span class="n">typesByAssembly</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And at the end here are links that will help a bit to embrace the changes of .NET 4.5 Beta:</p>

<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/ms171868(v=vs.110).aspx">What&#8217;s New in the .NET Framework 4.5 Beta</a></li>
<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-813T">Deep dive into the kernel of the .NET Framework</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/bb822049(v=vs.110).aspx">.NET Framework Versions and Dependencies</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ee461502(v=vs.110).aspx">What&#8217;s Obsolete in the .NET Framework</a></li>
<li><a href="http://go.microsoft.com/fwlink/?LinkID=237569">List of known issues in .NET 4.5 Beta</a></li>
</ul>


<p>Happy digging in new .NET and don&#8217;t hesitate sharing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Internet Archive Saved My Day]]></title>
    <link href="http://amanek.com/how-internet-archive-saved-my-day/"/>
    <updated>2012-01-09T06:09:50-08:00</updated>
    <id>http://amanek.com/how-internet-archive-saved-my-day</id>
    <content type="html"><![CDATA[<blockquote><p>UPDATE: <strong>igoogle_themes.zip</strong> archive is no longer available through Wayback Machine since it is pointing to <strong>mattberseth2.com</strong> which is not working. However archive could be found on my <a href="http://sdrv.ms/XpvZMi" title="igoogle_themes.zip">SkyDrive</a>.</p></blockquote>

<p><img class="right" src="http://www.archive.org/images/wayback.gif" title="Internet Wayback Machine Logo" alt="Internet Wayback Machine Logo"> Today when I had to find a theme for ASP.NET GridView the first resource I found in my memory was <a href="http://mattberseth.com/">Matt Berseth&#8217;s blog</a> (Google also found something for me but I&#8217;m convinced that &#8220;favorites list&#8221; in my memory is a much better and reliable source). Matt had great examples of AJAX¬†control extenders and some other things connected with styling of ASP.NET controls on his site. But while domain still belongs to Matt Berseth, the site is currently down and not available.</p>

<p>Well, I quickly found some references to the article <a href="http://mattberseth.com/blog/2007/11/5_gridview_themes_based_on_goo.html">5 GridView Themes Based on Google&#8217;s Personalized Homepage (igoogle)</a> and tried to get to it with the help of <a href="http://archive.org/">The Internet Archive</a> (aka The Wayback Machine). From the &#8220;About the Wayback Machine&#8221; section:</p>

<blockquote><p>Browse through over 150 billion web pages archived from 1996 to a few months ago.</p></blockquote>

<p>In fact it never helped me, but I¬†wanted to get rarely visited pages or downloads of a big size so it is nothing to complain. And at this time I was interested in recovery of popular resource and¬†to my relief¬†the page was crawled <a href="http://wayback.archive.org/web/*/http://mattberseth.com/blog/2007/11/5_gridview_themes_based_on_goo.html">20 times</a> from the 3rd of November, 2007. And sample project download was also available! So it took me something near to 20 minutes to get what I wanted and this is nothing comparing to the efforts needed to create my own CSS for a GridView.</p>

<p>Thank you Internet Archive, you saved my day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Data Annotations Validator Control With Client-Side Validation]]></title>
    <link href="http://amanek.com/building-data-annotations-validator-control-with-client-side-validation/"/>
    <updated>2012-01-04T13:16:45-08:00</updated>
    <id>http://amanek.com/building-data-annotations-validator-control-with-client-side-validation</id>
    <content type="html"><![CDATA[<p>When I had worked on ASP.NET MVC project I really liked how input is validated with Data Annotations attributes. And when I had to return to the Web Forms, and write a simple form with some validation, I was wondering how I lived before with standard validator controls. For me, it was never convenient, when I had to write an enormous amount of server tags just to state that &#8220;this is required field which accepts only numbers in specified range&#8230;&#8221;. Yes, there is nothing terrible in declaration of two or three validation controls instead of one. But, if I had a choice, I would like to write only one validator per field and keep all input validation logic as far as I can from the UI markup. And being a developer the code-only approach is most natural for me.</p>

<p><em>System.ComponentModel.DataAnnotations</em> namespace was introduced in .NET 3.5, and now its classes are supported by wide range of technologies like WPF, Silverlight, RIA Services, ASP.NET MVC, ASP.NET Dynamic Data but not in Web Forms. I thought that someone had already implemented ready-to-use Validator Control with client-side validation, but after searching the Web and most popular open source hosting services I found nothing. Ok, not nothing, but implementations what I have found lacked client-side validation and had some other issues. So I decided to write my own Data Annotations Validator that will also support client-side validation.</p>

<h2>Creating Data Annotations Validator Control</h2>

<h3>Server-Side</h3>

<p>As I wanted to achieve compatibility with existing validation controls (new validator is not a replacement for an old ones, it is just an addition to them), it was decided to inherit from <em>BaseValidator</em>. This class does all necessary initialization on both client- and server-sides and exposes all necessary methods for overriding.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DataAnnotationsValidator</span> <span class="p">:</span> <span class="n">BaseValidator</span>
</span><span class='line'><span class="p">{</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all <em>EvaluateIsValid</em> method of <em>BaseValidator</em> should be overridden.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">EvaluateIsValid</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">object</span> <span class="k">value</span> <span class="p">=</span> <span class="n">GetControlValidationValue</span><span class="p">(</span><span class="n">ControlToValidate</span><span class="p">);</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="n">ValidationAttribute</span> <span class="n">validationAttribute</span> <span class="k">in</span> <span class="n">ValidationAttributes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Here, we will try to convert value to type specified on RangeAttibute.</span>
</span><span class='line'>      <span class="c1">// RangeAttribute.OperandType should be either IConvertible or of built in primitive types</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">rangeAttibute</span> <span class="p">=</span> <span class="n">validationAttribute</span> <span class="k">as</span> <span class="n">RangeAttribute</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">rangeAttibute</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">value</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ChangeType</span><span class="p">(</span><span class="k">value</span><span class="p">,</span> <span class="n">rangeAttibute</span><span class="p">.</span><span class="n">OperandType</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">validationAttribute</span><span class="p">.</span><span class="n">IsValid</span><span class="p">(</span><span class="k">value</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ErrorMessage</span> <span class="p">=</span> <span class="n">validationAttribute</span><span class="p">.</span><span class="n">FormatErrorMessage</span><span class="p">(</span><span class="n">DisplayName</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only interesting aspect of this method is line 16. I&#8217;m using <em>FormatErrorMessage</em> method of <em>ValidationAttribute</em> to use all the goodness like support of resources and proper default error message formatting. So, now there is no need to invent something with error messages.</p>

<p>Next thing to deal with is where to get <em>ValidationAttributes</em> collection. There is <em>System.Web.DynamicData.MetaTable</em> class that could be used to retrieve attributes. It was introduced in the first versions of ASP.NET Dynamic Data and now in 4.0 version of Dynamic Data, <em>MetaTable</em> has a static method <em><a href="http://msdn.microsoft.com/en-us/library/dd989458.aspx">CreateTable</a></em> which accepts <em>Type</em> as input parameter. Why using <em>MetaTable</em>, why not retrieve attributes of <em>Type</em> directly from <em>PropertyInfo</em> for specified property name? Because <em>MetaTable</em> also supports retrieving of custom attributes that are applied to property through <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.metadatatypeattribute.aspx"><em>MetadataTypeAttribute</em></a> and merges attributes applied to property both in metadata class and entity class. And again, why inventing something new when everything that is needed is right here?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">MetaTable</span><span class="p">.</span><span class="n">CreateTable</span><span class="p">(</span><span class="n">ObjectType</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="n">GetColumn</span><span class="p">(</span><span class="n">PropertyName</span><span class="p">).</span><span class="n">Attributes</span>
</span><span class='line'>  <span class="p">.</span><span class="n">OfType</span><span class="p">&lt;</span><span class="n">ValidationAttribute</span><span class="p">&gt;()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s look a bit into the future - if we place ObjectType property into <em>DataAnnotationsValidator</em>, it means that we should specify this property for every validator control on page. This is redundancy and leads to copy-pasting which is not acceptable. Lets step aside and create <em>MetadataSource</em> control that will act like metadata provider for validators on page.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MetadataSource</span> <span class="p">:</span> <span class="n">Control</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">Type</span> <span class="n">ObjectType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="n">MetaTable</span> <span class="n">metaTable</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">MetaTable</span> <span class="n">MetaTable</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">metaTable</span> <span class="p">??</span> <span class="p">(</span><span class="n">metaTable</span> <span class="p">=</span> <span class="n">MetaTable</span><span class="p">.</span><span class="n">CreateTable</span><span class="p">(</span><span class="n">ObjectType</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">IEnumerable</span> <span class="nf">GetValidationAttributes</span><span class="p">(</span><span class="kt">string</span> <span class="n">property</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">MetaTable</span><span class="p">.</span><span class="n">GetColumn</span><span class="p">(</span><span class="n">property</span><span class="p">).</span><span class="n">Attributes</span><span class="p">.</span><span class="n">OfType</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetDisplayName</span><span class="p">(</span><span class="kt">string</span> <span class="n">objectProperty</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">displayAttribute</span> <span class="p">=</span> <span class="n">MetaTable</span><span class="p">.</span><span class="n">GetColumn</span><span class="p">(</span><span class="n">objectProperty</span><span class="p">).</span><span class="n">Attributes</span>
</span><span class='line'>          <span class="p">.</span><span class="n">OfType</span><span class="p">()</span>
</span><span class='line'>          <span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">displayAttribute</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="n">objectProperty</span> <span class="p">:</span> <span class="n">displayAttribute</span><span class="p">.</span><span class="n">GetName</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I also thought about <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.displayattribute.aspx">DisplayAttribute</a> which is used to format default error message. Now how <em>ObjectType</em> of <em>MetadataSouce</em> should be specified? Well, we can do it programmatically on Page_Load or do it.. programmatically with <a href="http://weblogs.asp.net/infinitiesloop/archive/2006/08/09/The-CodeExpressionBuilder.aspx">CodeExpressionBuilder</a> to keep all control setup in one place.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;dav:MetadataSource</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span>
</span><span class='line'>  <span class="na">ID=</span><span class="s">&quot;msFoo&quot;</span>
</span><span class='line'>  <span class="na">ObjectType=</span><span class="s">&quot;&lt;%$ Code: typeof(Foo) %&gt;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, with existence of <em>MetadataSource</em> all fields of <em>DataAnnotationsValidator</em> are initialized in the OnInit method</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnLoad</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">base</span><span class="p">.</span><span class="n">OnLoad</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(!</span><span class="n">ControlPropertiesValid</span><span class="p">())</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">MetadataSource</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">FindChildControl</span><span class="p">(</span><span class="n">MetadataSourceID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ValidationAttributes</span> <span class="p">=</span> <span class="n">MetadataSource</span><span class="p">.</span><span class="n">GetValidationAttributes</span><span class="p">(</span><span class="n">ObjectProperty</span><span class="p">);</span>
</span><span class='line'>  <span class="n">DisplayName</span> <span class="p">=</span> <span class="n">MetadataSource</span><span class="p">.</span><span class="n">GetDisplayName</span><span class="p">(</span><span class="n">ObjectProperty</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is all what was needed to provide server-side validation.</p>

<h3>Client-Side</h3>

<p>First of all, lets check what standard validator controls could be replaced with <em>Data Annotations</em> attributes.</p>

<table>
<thead>
<tr>
<th>Data Annotations Attribute </th>
<th> Standard Validator Control </th>
</tr>
</thead>
<tbody>
<tr>
<td>RequiredAttribute          </td>
<td> RequiredFieldValidator     </td>
</tr>
<tr>
<td>StringLengthAttribute      </td>
<td> -                          </td>
</tr>
<tr>
<td>RegularExpressionAttribute </td>
<td> RegularExpressionValidator </td>
</tr>
<tr>
<td>-                          </td>
<td> CompareValidator           </td>
</tr>
<tr>
<td>RangeAttribute             </td>
<td> RangeValidator             </td>
</tr>
</tbody>
</table>


<p>I have no ideas how to replace <em>CompareValidator</em> and I don&#8217;t think it is so critical and necessary to think on it. Time to look how standard validator controls are working on the client side.</p>

<p>Every validator that works on the client side should override <em>AddAttributesToRender</em> method of <em>BaseValidator</em> class. This method adds some fields to resulting javascript object. For example, <em>RequiredFieldValidator</em> adds <em>evaluationfunction</em> and <em>initialvalue</em> fields.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">AddAttributesToRender</span><span class="p">(</span><span class="n">HtmlTextWriter</span> <span class="n">writer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">base</span><span class="p">.</span><span class="n">AddAttributesToRender</span><span class="p">(</span><span class="n">writer</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">RenderUplevel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">id</span> <span class="p">=</span> <span class="n">ClientID</span><span class="p">;</span>
</span><span class='line'>        <span class="n">HtmlTextWriter</span> <span class="n">expandoAttributeWriter</span> <span class="p">=</span> <span class="p">(</span><span class="n">EnableLegacyRendering</span><span class="p">)</span> <span class="p">?</span> <span class="n">writer</span> <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="n">AddExpandoAttribute</span><span class="p">(</span><span class="n">expandoAttributeWriter</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="s">&quot;evaluationfunction&quot;</span><span class="p">,</span> <span class="s">&quot;RequiredFieldValidatorEvaluateIsValid&quot;</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>        <span class="n">AddExpandoAttribute</span><span class="p">(</span><span class="n">expandoAttributeWriter</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="s">&quot;initialvalue&quot;</span><span class="p">,</span> <span class="n">InitialValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And resulting javascript block for <em>RequiredFieldValidator</em> will look next:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">//&lt;![CDATA[</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">rfvSampleTextBox</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">all</span> <span class="o">?</span> <span class="nb">document</span><span class="p">.</span><span class="nx">all</span><span class="p">[</span><span class="s2">&quot;rfvSampleTextBox&quot;</span><span class="p">]</span> <span class="o">:</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;rfvSampleTextBox&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">rfvSampleTextBox</span><span class="p">.</span><span class="nx">controltovalidate</span> <span class="o">=</span> <span class="s2">&quot;tbSampleTextBox&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">rfvSampleTextBox</span><span class="p">.</span><span class="nx">evaluationfunction</span> <span class="o">=</span> <span class="s2">&quot;RequiredFieldValidatorEvaluateIsValid&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">rfvSampleTextBox</span><span class="p">.</span><span class="nx">initialvalue</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//]]&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After examining source code of standard validator controls I found that every control sets <em>evaluationfunction</em> field that states a name for a javascript function that actually performs validation on the client-side. RequiredFieldValidator evaluation function is represented below.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">RequiredFieldValidatorEvaluateIsValid</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nx">ValidatorTrim</span><span class="p">(</span><span class="nx">ValidatorGetValue</span><span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">controltovalidate</span><span class="p">))</span> <span class="o">!=</span> <span class="nx">ValidatorTrim</span><span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">initialvalue</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>val</em> parameter is a validator object that was initialized with all the fields that were set in the <em>AddAttributesToRender</em> method. Plain and simple, if you need to supply your validator on client-side with some information override <em>AddAttributesToRender</em> and add what you want. To replace standard validators <em>DataAnnotationsValidator</em> is doing a little trick - it adds all standard <em>evaluationfunction</em> names, error messages and all necessary fields that are used by standard validation functions. Evaluation function of <em>DataAnnotationsValidator:</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">//&lt;![CDATA[</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">DataAnnotationsValidatorIsValid</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">functionsToEvaluate</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">validatorFunctions</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">errorMessages</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">errorMessages</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">funcIndex</span> <span class="k">in</span> <span class="nx">functionsToEvaluate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">functionsToEvaluate</span><span class="p">[</span><span class="nx">funcIndex</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;(val)&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">result</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">val</span><span class="p">.</span><span class="nx">errormessage</span> <span class="o">=</span> <span class="nx">errorMessages</span><span class="p">[</span><span class="nx">funcIndex</span><span class="p">];</span>
</span><span class='line'>          <span class="nx">val</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">errorMessages</span><span class="p">[</span><span class="nx">funcIndex</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//]]&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function is registered in the <em>OnPreRender</em> stage of control lifecycle.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnPreRender</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">base</span><span class="p">.</span><span class="n">OnPreRender</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">RenderUplevel</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">scriptManager</span> <span class="p">=</span> <span class="n">ScriptManager</span><span class="p">.</span><span class="n">GetCurrent</span><span class="p">(</span><span class="n">Page</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">scriptManager</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">scriptManager</span><span class="p">.</span><span class="n">IsInAsyncPostBack</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ScriptManager</span><span class="p">.</span><span class="n">RegisterClientScriptResource</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">GetType</span><span class="p">(),</span> <span class="n">DAValidationScriptFileName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">Page</span><span class="p">.</span><span class="n">ClientScript</span><span class="p">.</span><span class="n">RegisterClientScriptResource</span><span class="p">(</span><span class="n">GetType</span><span class="p">(),</span> <span class="n">DAValidationScriptFileName</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing that remains is to get list of fields and values that are needed for validation functions. Every <em>Data Annotation</em> validation attribute will have an <em>Adapter</em> class that stores an array of <em>ClientValidationRule</em> classes. <em>ClientValidationRule</em> is just a container for storing javascript object <em>field names</em> and <em>evaluationfunction</em>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ClientValidationRule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">EvaluationFunction</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">Parameters</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">ErrorMessage</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">ClientValidationRule</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">EvaluationFunction</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <em>ValidationAttributeAdapter</em> acts like a bridge between existing <em>ValidationAttibute</em> and its <em>ClientValidationRules.</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ValidationAttributeAdapter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">ValidationAttribute</span> <span class="n">Attribute</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">protected</span> <span class="kt">string</span> <span class="n">DisplayName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">protected</span> <span class="kt">string</span> <span class="n">ErrorMessage</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">ValidationAttributeAdapter</span><span class="p">(</span><span class="n">ValidationAttribute</span> <span class="n">attribute</span><span class="p">,</span> <span class="kt">string</span> <span class="n">displayName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Attribute</span> <span class="p">=</span> <span class="n">attribute</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DisplayName</span> <span class="p">=</span> <span class="n">displayName</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ErrorMessage</span> <span class="p">=</span> <span class="n">Attribute</span><span class="p">.</span><span class="n">FormatErrorMessage</span><span class="p">(</span><span class="n">DisplayName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ClientValidationRule</span><span class="p">&gt;</span> <span class="n">GetClientValidationRules</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Empty</span><span class="p">&lt;</span><span class="n">ClientValidationRule</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All <em>ValidationAttributeAdapter</em> classes are registered within <em>ValidationAttributeAdapterFactory</em> in a <em>Dictionary</em>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">ValidationAttribute</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="n">ValidationAttributeAdapter</span><span class="p">&gt;&gt;</span> <span class="n">PredefinedCreators</span>
</span><span class='line'>    <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">ValidationAttribute</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="n">ValidationAttributeAdapter</span><span class="p">&gt;&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">typeof</span><span class="p">(</span><span class="n">RangeAttribute</span><span class="p">),</span>
</span><span class='line'>            <span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">RangeAttributeAdapter</span><span class="p">(</span><span class="n">attribute</span> <span class="k">as</span> <span class="n">RangeAttribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">typeof</span><span class="p">(</span><span class="n">RegularExpressionAttribute</span><span class="p">),</span>
</span><span class='line'>            <span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">RegularExpressionAttributeAdapter</span><span class="p">(</span><span class="n">attribute</span> <span class="k">as</span> <span class="n">RegularExpressionAttribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">typeof</span><span class="p">(</span><span class="n">RequiredAttribute</span><span class="p">),</span>
</span><span class='line'>            <span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">RequiredAttributeAdapter</span><span class="p">(</span><span class="n">attribute</span> <span class="k">as</span> <span class="n">RequiredAttribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">typeof</span> <span class="p">(</span><span class="n">StringLengthAttribute</span><span class="p">),</span>
</span><span class='line'>            <span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">StringLengthAttributeAdapter</span><span class="p">(</span><span class="n">attribute</span> <span class="k">as</span> <span class="n">StringLengthAttribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">ValidationAttributeAdapter</span> <span class="nf">Create</span><span class="p">(</span><span class="n">ValidationAttribute</span> <span class="n">attribute</span><span class="p">,</span> <span class="kt">string</span> <span class="n">displayName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">Assert</span><span class="p">(</span><span class="n">attribute</span> <span class="p">!=</span> <span class="k">null</span><span class="p">,</span> <span class="s">&quot;attribute parameter must not be null&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">Assert</span><span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">displayName</span><span class="p">),</span> <span class="s">&quot;displayName parameter must not be null, empty or whitespace string&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Added suport for ValidationAttribute subclassing. See http://davalidation.codeplex.com/workitem/695</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">baseType</span> <span class="p">=</span> <span class="n">attribute</span><span class="p">.</span><span class="n">GetType</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Func</span><span class="p">&lt;</span><span class="n">ValidationAttribute</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="n">ValidationAttributeAdapter</span><span class="p">&gt;</span> <span class="n">predefinedCreator</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(!</span><span class="n">PredefinedCreators</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">baseType</span><span class="p">,</span> <span class="k">out</span> <span class="n">predefinedCreator</span><span class="p">))</span>
</span><span class='line'>            <span class="n">baseType</span> <span class="p">=</span> <span class="n">baseType</span><span class="p">.</span><span class="n">BaseType</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">predefinedCreator</span> <span class="p">==</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">baseType</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">baseType</span> <span class="p">!=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">Attribute</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">predefinedCreator</span> <span class="p">!=</span> <span class="k">null</span>
</span><span class='line'>        <span class="p">?</span> <span class="n">predefinedCreator</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">new</span> <span class="n">ValidationAttributeAdapter</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">displayName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I said previously, idea was borrowed directly from ASP.NET MVC, so if you are familiar with its validation mechanisms you don&#8217;t need to learn how it works here. Approach here is almost identical to ASP.NET MVC which was <a href="http://bradwilson.typepad.com/blog/2010/10/mvc3-unobtrusive-validation.html">described</a> well by Brad Wilson. As in ASP.NET MVC <em>DAValidation.IClientValidatable</em> interface exposes an extension point and we can now create a custom validation attribute, implement <em>IClientValidatable</em> interface, write validation function or mix existing ones and get both server- and client-side validation. There is a great set of validation attributes - <a href="http://dataannotationsextensions.org/">Data Annotations Extensions</a> created by <a href="http://weblogs.asp.net/srkirkland/">Scott Kirkland</a> so it is only client function must be changed in order to use them with <em>DataAnnotationsValidator</em>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IClientValidatable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ClientValidationRule</span><span class="p">&gt;</span> <span class="n">GetClientValidationRules</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all, now we have fully functional control that makes validation with Data Annotations possible in the ASP.NET Web Forms universe.</p>

<p>Complete source code could be found on <a href="http://davalidation.codeplex.com/">Codeplex</a>. There you can download latest version of control and example project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About me]]></title>
    <link href="http://amanek.com/about-me/"/>
    <updated>2011-05-02T09:33:15-07:00</updated>
    <id>http://amanek.com/about-me</id>
    <content type="html"><![CDATA[<p>Welcome!</p>

<p>My name is Alexander Manekovskiy. I&#8217;m .NET developer currently working in <a href="http://bit.biz.ua">BIT</a>, where my main duties are to develop and maintain couple of .NET based solutions and sometimes represent company on regional IT conferences and meetings. Also I&#8217;m working as a trainer at <a href="http://itstep.org">ITStep</a>.</p>

<p>I work primarily on the Microsoft .NET technologies stack and my experience is mainly connected with different intranet web-based applications which were tightly integrated with various 3rd party solutions and products such as Microsoft Office, Adobe InDesign, different Storefronts, CRM systems, etc.</p>

<p>I like trying new things and I&#8217;m always open to new interesting ideas and concepts. And in this blog I&#8217;m going to write about practices, tools and ideas that in my mind could be useful or just interesting for .NET developer. The second idea of running this blog is to have an online 24/7 memory stick.</p>

<p>I&#8217;m always open to cooperation and you can freely contact me by¬†email or skype:</p>

<p><strong>Email</strong>: manekovskiy[at]gmail.com
<strong>Skype</strong>: alexander.manekovskiy</p>
]]></content>
  </entry>
  
</feed>
